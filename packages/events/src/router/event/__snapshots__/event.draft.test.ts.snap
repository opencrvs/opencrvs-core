// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Allows creating draft for event with actions 1`] = `
{
  "action": {
    "annotation": null,
    "createdAt": "[sanitized]",
    "createdAtLocation": "[sanitized]",
    "createdBy": "[sanitized]",
    "createdByRole": "REGISTRATION_AGENT",
    "createdByUserType": "[sanitized]",
    "declaration": {},
    "status": "Accepted",
    "transactionId": "[sanitized]",
    "type": "VALIDATE",
  },
  "createdAt": "[sanitized]",
  "eventId": "[sanitized]",
  "id": "[sanitized]",
  "transactionId": "[sanitized]",
}
`;

exports[`Allows creating draft for event without actions 1`] = `
{
  "action": {
    "annotation": null,
    "createdAt": "[sanitized]",
    "createdAtLocation": "[sanitized]",
    "createdBy": "[sanitized]",
    "createdByRole": "REGISTRATION_AGENT",
    "createdByUserType": "[sanitized]",
    "declaration": {},
    "status": "Accepted",
    "transactionId": "[sanitized]",
    "type": "DECLARE",
  },
  "createdAt": "[sanitized]",
  "eventId": "[sanitized]",
  "id": "[sanitized]",
  "transactionId": "[sanitized]",
}
`;

exports[`Creating another draft replaces the previous one 1`] = `
[
  {
    "action": {
      "annotation": {
        "comment": "draft 2",
      },
      "createdAt": "[sanitized]",
      "createdAtLocation": "[sanitized]",
      "createdBy": "[sanitized]",
      "createdByRole": "REGISTRATION_AGENT",
      "createdByUserType": "[sanitized]",
      "declaration": {},
      "status": "Accepted",
      "transactionId": "[sanitized]",
      "type": "DECLARE",
    },
    "createdAt": "[sanitized]",
    "eventId": "[sanitized]",
    "id": "[sanitized]",
    "transactionId": "[sanitized]",
  },
]
`;

exports[`Delete document references in drafts as side-effect > Delete previous draft attachments 1`] = `
[
  [
    "http://localhost:9050/files/ocrvs/1-4f095fc4-4312-4de2-aa38-86dcc0f71044.png",
    ReadableStream {
      "constructor": [Function],
      Symbol(kType): "ReadableStream",
      Symbol(kState): {
        "controller": ReadableStreamDefaultController {
          Symbol(kType): "ReadableStreamDefaultController",
          Symbol(kState): {
            "cancelAlgorithm": undefined,
            "closeRequested": true,
            "highWaterMark": 1,
            "pullAgain": false,
            "pullAlgorithm": undefined,
            "pulling": false,
            "queue": [],
            "queueTotalSize": 0,
            "sizeAlgorithm": undefined,
            "started": true,
            "stream": [Circular],
          },
        },
        "disturbed": false,
        "reader": undefined,
        "state": "closed",
        "storedError": undefined,
        "transfer": {
          "port1": undefined,
          "port2": undefined,
          "promise": undefined,
          "writable": undefined,
        },
      },
      Symbol(nodejs.webstream.isClosedPromise): {
        "promise": Promise {},
        "reject": [Function],
        "resolve": [Function],
      },
      Symbol(nodejs.webstream.controllerErrorFunction): [Function],
    },
  ],
  [
    "http://localhost:9050/files/ocrvs/2-4f095fc4-4312-4de2-aa38-86dcc0f71044.png",
    ReadableStream {
      "constructor": [Function],
      Symbol(kType): "ReadableStream",
      Symbol(kState): {
        "controller": ReadableStreamDefaultController {
          Symbol(kType): "ReadableStreamDefaultController",
          Symbol(kState): {
            "cancelAlgorithm": undefined,
            "closeRequested": true,
            "highWaterMark": 1,
            "pullAgain": false,
            "pullAlgorithm": undefined,
            "pulling": false,
            "queue": [],
            "queueTotalSize": 0,
            "sizeAlgorithm": undefined,
            "started": true,
            "stream": [Circular],
          },
        },
        "disturbed": false,
        "reader": undefined,
        "state": "closed",
        "storedError": undefined,
        "transfer": {
          "port1": undefined,
          "port2": undefined,
          "promise": undefined,
          "writable": undefined,
        },
      },
      Symbol(nodejs.webstream.isClosedPromise): {
        "promise": Promise {},
        "reject": [Function],
        "resolve": [Function],
      },
      Symbol(nodejs.webstream.controllerErrorFunction): [Function],
    },
  ],
  [
    "http://localhost:9050/files/ocrvs/3-4f095fc4-4312-4de2-aa38-86dcc0f71044.png",
    ReadableStream {
      "constructor": [Function],
      Symbol(kType): "ReadableStream",
      Symbol(kState): {
        "controller": ReadableStreamDefaultController {
          Symbol(kType): "ReadableStreamDefaultController",
          Symbol(kState): {
            "cancelAlgorithm": undefined,
            "closeRequested": true,
            "highWaterMark": 1,
            "pullAgain": false,
            "pullAlgorithm": undefined,
            "pulling": false,
            "queue": [],
            "queueTotalSize": 0,
            "sizeAlgorithm": undefined,
            "started": true,
            "stream": [Circular],
          },
        },
        "disturbed": false,
        "reader": undefined,
        "state": "closed",
        "storedError": undefined,
        "transfer": {
          "port1": undefined,
          "port2": undefined,
          "promise": undefined,
          "writable": undefined,
        },
      },
      Symbol(nodejs.webstream.isClosedPromise): {
        "promise": Promise {},
        "reject": [Function],
        "resolve": [Function],
      },
      Symbol(nodejs.webstream.controllerErrorFunction): [Function],
    },
  ],
  [
    "http://localhost:9050/files/ocrvs/4-4f095fc4-4312-4de2-aa38-86dcc0f71044.png",
    ReadableStream {
      "constructor": [Function],
      Symbol(kType): "ReadableStream",
      Symbol(kState): {
        "controller": ReadableStreamDefaultController {
          Symbol(kType): "ReadableStreamDefaultController",
          Symbol(kState): {
            "cancelAlgorithm": [Function],
            "closeRequested": false,
            "highWaterMark": 1,
            "pullAgain": false,
            "pullAlgorithm": [Function],
            "pulling": false,
            "queue": [],
            "queueTotalSize": 0,
            "sizeAlgorithm": [Function],
            "started": true,
            "stream": [Circular],
          },
        },
        "disturbed": false,
        "reader": undefined,
        "state": "readable",
        "storedError": undefined,
        "transfer": {
          "port1": undefined,
          "port2": undefined,
          "promise": undefined,
          "writable": undefined,
        },
      },
      Symbol(nodejs.webstream.isClosedPromise): {
        "promise": Promise {},
        "reject": [Function],
        "resolve": [Function],
      },
      Symbol(nodejs.webstream.controllerErrorFunction): [Function],
    },
  ],
]
`;
