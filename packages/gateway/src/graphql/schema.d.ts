import { Context } from './context'
/* tslint:disable */
/* eslint-disable */
import { GraphQLResolveInfo, GraphQLScalarType } from 'graphql'
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */

/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
export interface GQLQuery {
  sendNotificationToAllUsers?: GQLNotificationResult
  fetchBirthRegistration?: GQLBirthRegistration
  queryRegistrationByIdentifier?: GQLBirthRegistration
  queryPersonByIdentifier?: GQLPerson
  listBirthRegistrations?: GQLBirthRegResultSet
  fetchDeathRegistration?: GQLDeathRegistration
  fetchEventRegistration?: GQLEventRegistration
  fetchRegistration?: GQLEventRegistration
  fetchRegistrationForViewing?: GQLEventRegistration
  queryPersonByNidIdentifier?: GQLPerson
  fetchRegistrationCountByStatus?: GQLRegistrationCountResult
  fetchMarriageRegistration?: GQLMarriageRegistration
  fetchRecordDetailsForVerification?: GQLRecordDetails
  isLeafLevelLocation: boolean
  getUser?: GQLUser
  getUserByMobile?: GQLUser
  getUserByEmail?: GQLUser
  searchUsers?: GQLSearchUserResult
  searchFieldAgents?: GQLSearchFieldAgentResult
  verifyPasswordById?: GQLVerifyPasswordResult
  getTotalMetrics?: GQLTotalMetricsResult
  getRegistrationsListByFilter?: GQLMixedTotalMetricsResult
  getVSExports?: GQLTotalVSExport
  getTotalPayments?: Array<GQLPaymentMetric>
  getTotalCertifications?: Array<GQLCertificationMetric>
  getTotalCorrections?: Array<GQLCorrectionMetric>
  getLocationStatistics?: GQLLocationStatisticsResponse
  getDeclarationsStartedMetrics?: GQLDeclarationsStartedMetrics
  fetchMonthWiseEventMetrics?: Array<GQLMonthWiseEstimationMetric>
  fetchLocationWiseEventMetrics?: Array<GQLLocationWiseEstimationMetric>
  getUserAuditLog?: GQLUserAuditLogResultSet
  searchEvents?: GQLEventSearchResultSet
  getEventsWithProgress?: GQLEventProgressResultSet
  getUserRoles: Array<GQLUserRole>
  fetchSystem?: GQLSystem
}

export interface GQLMutation {
  requestRegistrationCorrection: string
  rejectRegistrationCorrection: string
  approveBirthRegistrationCorrection: string
  approveDeathRegistrationCorrection: string
  approveMarriageRegistrationCorrection: string
  createBirthRegistrationCorrection: string
  createDeathRegistrationCorrection: string
  createMarriageRegistrationCorrection: string
  createBirthRegistration: GQLCreatedIds
  markBirthAsVerified?: GQLBirthRegistration
  markBirthAsValidated?: string
  markBirthAsRegistered: string
  markBirthAsCertified: string
  markBirthAsIssued: string
  markEventAsVoided: string
  markEventAsReinstated?: GQLReinstated
  markEventAsNotDuplicate: string
  markEventAsArchived: string
  createDeathRegistration: GQLCreatedIds
  updateDeathRegistration: string
  markDeathAsVerified?: GQLDeathRegistration
  markDeathAsValidated?: string
  markDeathAsRegistered: string
  markDeathAsCertified: string
  markDeathAsIssued: string
  markEventAsUnassigned: string
  createMarriageRegistration: GQLCreatedIds
  markMarriageAsValidated?: string
  markMarriageAsRegistered: string
  markMarriageAsCertified: string
  markMarriageAsIssued: string
  markEventAsDuplicate: string
  confirmRegistration: string
  rejectRegistration: string
  upsertRegistrationIdentifier: string
  createOrUpdateUser: GQLUser
  activateUser?: string
  changePassword?: string
  changePhone?: string
  changeEmail?: string
  changeAvatar?: GQLAvatar
  auditUser?: string
  resendInvite?: string
  usernameReminder?: string
  resetPasswordInvite?: string
  reactivateSystem?: GQLSystem
  deactivateSystem?: GQLSystem
  registerSystem?: GQLSystemSecret
  refreshSystemSecret?: GQLSystemSecret
  updatePermissions?: GQLSystem
  deleteSystem?: GQLSystem
  bookmarkAdvancedSearch?: GQLBookMarkedSearches
  removeBookmarkedAdvancedSearch?: GQLBookMarkedSearches
}

export interface GQLDummy {
  dummy: string
}

export interface GQLNotificationResult {
  success: boolean
}

export const enum GQLNotificationType {
  EMAIL = 'EMAIL',
  SMS = 'SMS'
}

export interface GQLBirthRegistration extends GQLEventRegistration {
  id: string
  _fhirIDMap?: GQLMap
  registration?: GQLRegistration
  child?: GQLPerson
  mother?: GQLPerson
  father?: GQLPerson
  informant?: GQLRelatedPerson
  eventLocation?: GQLLocation
  birthType?: string
  questionnaire?: Array<GQLQuestionnaireQuestion | null>
  weightAtBirth?: number
  attendantAtBirth?: string
  otherAttendantAtBirth?: string
  childrenBornAliveToMother?: number
  foetalDeathsToMother?: number
  lastPreviousLiveBirth?: GQLDate
  createdAt?: GQLDate
  updatedAt?: GQLDate
  history?: Array<GQLHistory | null>
}

export interface GQLPerson {
  id?: string
  _fhirID?: string
  identifier?: Array<GQLIdentityType | null>
  name?: Array<GQLHumanName | null>
  telecom?: Array<GQLContactPoint | null>
  gender?: string
  birthDate?: GQLPlainDate
  age?: number
  maritalStatus?: string
  occupation?: string
  detailsExist?: boolean
  reasonNotApplying?: string
  dateOfMarriage?: GQLPlainDate
  multipleBirth?: number
  address?: Array<GQLAddress | null>
  photo?: Array<GQLAttachment | null>
  deceased?: GQLDeceased
  nationality?: Array<string | null>
  educationalAttainment?: string
  ageOfIndividualInYears?: number
  exactDateOfBirthUnknown?: boolean
}

export interface GQLBirthRegResultSet {
  results?: Array<GQLBirthRegistration | null>
  totalItems?: number
}

export type GQLDate = any

export interface GQLDeathRegistration extends GQLEventRegistration {
  id: string
  _fhirIDMap?: GQLMap
  registration?: GQLRegistration
  deceased?: GQLPerson
  informant?: GQLRelatedPerson
  mother?: GQLPerson
  father?: GQLPerson
  spouse?: GQLPerson
  eventLocation?: GQLLocation
  questionnaire?: Array<GQLQuestionnaireQuestion | null>
  mannerOfDeath?: string
  deathDescription?: string
  causeOfDeathMethod?: string
  causeOfDeathEstablished?: string
  causeOfDeath?: string
  maleDependentsOfDeceased?: number
  femaleDependentsOfDeceased?: number
  medicalPractitioner?: GQLMedicalPractitioner
  createdAt?: GQLDate
  updatedAt?: GQLDate
  history?: Array<GQLHistory | null>
}

export interface GQLEventRegistration {
  id: string
  registration?: GQLRegistration
  history?: Array<GQLHistory | null>
  createdAt?: GQLDate
}

/** Use this to resolve interface type EventRegistration */
export type GQLPossibleEventRegistrationTypeNames =
  | 'BirthRegistration'
  | 'DeathRegistration'
  | 'MarriageRegistration'

export interface GQLEventRegistrationNameMap {
  EventRegistration: GQLEventRegistration
  BirthRegistration: GQLBirthRegistration
  DeathRegistration: GQLDeathRegistration
  MarriageRegistration: GQLMarriageRegistration
}

export interface GQLRegistrationCountResult {
  results: Array<GQLStatusWiseRegistrationCount | null>
  total: number
}

export interface GQLMarriageRegistration extends GQLEventRegistration {
  id: string
  _fhirIDMap?: GQLMap
  registration?: GQLRegistration
  informant?: GQLRelatedPerson
  bride?: GQLPerson
  groom?: GQLPerson
  witnessOne?: GQLRelatedPerson
  witnessTwo?: GQLRelatedPerson
  eventLocation?: GQLLocation
  typeOfMarriage?: string
  questionnaire?: Array<GQLQuestionnaireQuestion | null>
  createdAt?: GQLDate
  updatedAt?: GQLDate
  history?: Array<GQLHistory | null>
}

export type GQLRecordDetails = GQLBirthRegistration | GQLDeathRegistration

/** Use this to resolve union type RecordDetails */
export type GQLPossibleRecordDetailsTypeNames =
  | 'BirthRegistration'
  | 'DeathRegistration'

export interface GQLRecordDetailsNameMap {
  RecordDetails: GQLRecordDetails
  BirthRegistration: GQLBirthRegistration
  DeathRegistration: GQLDeathRegistration
}

export interface GQLUser {
  id: string
  userMgntUserID: string
  practitionerId: string
  name: Array<GQLHumanName>
  username?: string
  mobile?: string
  role: GQLUserRole
  email?: string
  status: GQLStatus
  underInvestigation?: boolean
  primaryOffice: GQLLocation
  localRegistrar?: GQLLocalRegistrar
  identifier?: GQLIdentifier
  signature?: GQLSignature
  creationDate: string
  avatar?: GQLAvatar
  device?: string
  searches?: Array<GQLBookmarkedSeachItem>
}

export interface GQLSearchUserResult {
  results?: Array<GQLUser | null>
  totalItems?: number
}

export interface GQLSearchFieldAgentResult {
  results?: Array<GQLSearchFieldAgentResponse | null>
  totalItems?: number
}

export interface GQLVerifyPasswordResult {
  mobile?: string
  scrope?: Array<string | null>
  status?: string
  username?: string
  id?: string
}

export interface GQLTotalMetricsResult {
  estimated: GQLEstimation
  results: Array<GQLEventMetrics>
}

export type GQLMixedTotalMetricsResult =
  | GQLTotalMetricsByRegistrar
  | GQLTotalMetricsByLocation
  | GQLTotalMetricsByTime

/** Use this to resolve union type MixedTotalMetricsResult */
export type GQLPossibleMixedTotalMetricsResultTypeNames =
  | 'TotalMetricsByRegistrar'
  | 'TotalMetricsByLocation'
  | 'TotalMetricsByTime'

export interface GQLMixedTotalMetricsResultNameMap {
  MixedTotalMetricsResult: GQLMixedTotalMetricsResult
  TotalMetricsByRegistrar: GQLTotalMetricsByRegistrar
  TotalMetricsByLocation: GQLTotalMetricsByLocation
  TotalMetricsByTime: GQLTotalMetricsByTime
}

export interface GQLTotalVSExport {
  results?: Array<GQLVSExport>
}

export interface GQLPaymentMetric {
  total: number
  paymentType: string
}

export interface GQLCertificationMetric {
  total: number
  eventType: string
}

export interface GQLCorrectionMetric {
  total: number
  reason: string
}

export interface GQLLocationStatisticsResponse {
  population?: number
  registrars: number
  offices: number
}

export interface GQLDeclarationsStartedMetrics {
  fieldAgentDeclarations: number
  hospitalDeclarations: number
  officeDeclarations: number
}

export interface GQLMonthWiseEstimationMetric {
  total: number
  withinTarget: number
  within1Year: number
  within5Years: number
  estimated: number
  month: number
  year: number
}

export interface GQLLocationWiseEstimationMetric {
  total: number
  withinTarget: number
  within1Year: number
  within5Years: number
  estimated: number
  locationId: string
  locationName: string
}

export interface GQLUserAuditLogResultSet {
  total: number
  results: Array<GQLUserAuditLogResultItem>
}

export interface GQLEventSearchResultSet {
  results?: Array<GQLEventSearchSet | null>
  totalItems?: number
}

export interface GQLAdvancedSearchParametersInput {
  event?: GQLEventType
  name?: string
  registrationStatuses?: Array<string | null>
  dateOfEvent?: string
  dateOfEventStart?: string
  dateOfEventEnd?: string
  timePeriodFrom?: string
  contactNumber?: string
  contactEmail?: string
  nationalId?: string
  registrationNumber?: string
  trackingId?: string
  recordId?: string
  dateOfRegistration?: string
  dateOfRegistrationStart?: string
  dateOfRegistrationEnd?: string
  declarationLocationId?: string
  declarationJurisdictionId?: string
  eventLocationId?: string
  eventCountry?: string
  eventLocationLevel1?: string
  eventLocationLevel2?: string
  eventLocationLevel3?: string
  eventLocationLevel4?: string
  eventLocationLevel5?: string
  eventLocationLevel6?: string
  childFirstNames?: string
  childLastName?: string
  childDoB?: string
  childDoBStart?: string
  childDoBEnd?: string
  childGender?: string
  childIdentifier?: string
  deceasedFirstNames?: string
  deceasedFamilyName?: string
  deceasedGender?: string
  deceasedDoB?: string
  deceasedDoBStart?: string
  deceasedDoBEnd?: string
  deceasedIdentifier?: string
  groomFirstNames?: string
  groomFamilyName?: string
  groomDoB?: string
  groomDoBStart?: string
  groomDoBEnd?: string
  groomIdentifier?: string
  brideFirstNames?: string
  brideFamilyName?: string
  brideDoB?: string
  brideDoBStart?: string
  brideDoBEnd?: string
  brideIdentifier?: string
  dateOfMarriage?: string
  motherFirstNames?: string
  motherFamilyName?: string
  motherDoB?: string
  motherDoBStart?: string
  motherDoBEnd?: string
  motherIdentifier?: string
  fatherFirstNames?: string
  fatherFamilyName?: string
  fatherDoB?: string
  fatherDoBStart?: string
  fatherDoBEnd?: string
  fatherIdentifier?: string
  informantFirstNames?: string
  informantFamilyName?: string
  informantDoB?: string
  informantDoBStart?: string
  informantDoBEnd?: string
  informantIdentifier?: string
  compositionType?: Array<string | null>
}

export interface GQLSortBy {
  column: string
  order: string
}

export interface GQLEventProgressResultSet {
  results?: Array<GQLEventProgressSet | null>
  totalItems?: number
}

export interface GQLUserRole {
  id: string
  label: GQLI18nMessage
  scopes: Array<string>
}

export interface GQLSystem {
  _id: string
  clientId: string
  shaSecret: string
  status: GQLSystemStatus
  name: string
  type: GQLSystemType
  integratingSystemType?: GQLIntegratingSystemType
  settings?: GQLSystemSettings
}

export interface GQLCorrectionInput {
  requester: string
  requesterOther?: string
  hasShowedVerifiedDocument: boolean
  noSupportingDocumentationRequired: boolean
  attachments: Array<GQLAttachmentInput>
  payment?: GQLCorrectionPaymentInput
  values: Array<GQLCorrectionValueInput>
  location: GQLLocationInput
  reason: string
  otherReason: string
  note: string
}

export interface GQLCorrectionRejectionInput {
  reason: string
  timeLoggedMS: number
}

export interface GQLBirthRegistrationInput {
  _fhirIDMap?: GQLFHIRIDMap
  registration?: GQLRegistrationInput
  child?: GQLPersonInput
  mother?: GQLPersonInput
  father?: GQLPersonInput
  informant?: GQLRelatedPersonInput
  eventLocation?: GQLLocationInput
  birthType?: string
  questionnaire?: Array<GQLQuestionnaireQuestionInput | null>
  weightAtBirth?: number
  attendantAtBirth?: string
  otherAttendantAtBirth?: string
  childrenBornAliveToMother?: number
  foetalDeathsToMother?: number
  lastPreviousLiveBirth?: GQLDate
  createdAt?: GQLDate
  updatedAt?: GQLDate
}

export interface GQLDeathRegistrationInput {
  _fhirIDMap?: GQLFHIRIDMap
  registration?: GQLRegistrationInput
  deceased?: GQLPersonInput
  informant?: GQLRelatedPersonInput
  mother?: GQLPersonInput
  father?: GQLPersonInput
  spouse?: GQLPersonInput
  eventLocation?: GQLLocationInput
  questionnaire?: Array<GQLQuestionnaireQuestionInput | null>
  mannerOfDeath?: string
  deathDescription?: string
  causeOfDeathMethod?: string
  causeOfDeathEstablished?: string
  causeOfDeath?: string
  maleDependentsOfDeceased?: number
  femaleDependentsOfDeceased?: number
  medicalPractitioner?: GQLMedicalPractitionerInput
  createdAt?: GQLDate
  updatedAt?: GQLDate
}

export interface GQLMarriageRegistrationInput {
  _fhirIDMap?: GQLFHIRIDMap
  registration?: GQLRegistrationInput
  informant?: GQLRelatedPersonInput
  bride?: GQLPersonInput
  groom?: GQLPersonInput
  witnessOne?: GQLRelatedPersonInput
  witnessTwo?: GQLRelatedPersonInput
  eventLocation?: GQLLocationInput
  typeOfMarriage?: string
  questionnaire?: Array<GQLQuestionnaireQuestionInput | null>
  createdAt?: GQLDate
  updatedAt?: GQLDate
}

export interface GQLCreatedIds {
  compositionId?: string
  trackingId?: string
  isPotentiallyDuplicate?: boolean
}

export interface GQLReinstated {
  taskEntryResourceID: string
  registrationStatus?: GQLRegStatus
}

export interface GQLConfirmRegistrationInput {
  registrationNumber: string
  identifiers?: Array<GQLIdentifierInput>
  comment?: string
}

export interface GQLRejectRegistrationInput {
  reason: string
  comment?: string
}

export interface GQLUserInput {
  id?: string
  name: Array<GQLHumanNameInput>
  identifier?: Array<GQLUserIdentifierInput | null>
  username?: string
  mobile?: string
  password?: string
  status?: GQLStatus
  role?: string
  email?: string
  primaryOffice?: string
  device?: string
  signature?: GQLSignatureInput
}

export interface GQLSecurityQuestionAnswer {
  questionKey?: string
  answer?: string
}

export interface GQLAvatar {
  type: string
  data: string
}

export interface GQLAvatarInput {
  type: string
  data: string
}

export interface GQLSystemSecret {
  system: GQLSystem
  clientSecret: string
}

export interface GQLSystemInput {
  name: string
  type: GQLSystemType
  settings?: GQLSystemSettingsInput
  integratingSystemType?: GQLIntegratingSystemType
}

export interface GQLUpdatePermissionsInput {
  clientId: string
  webhook: Array<GQLWebhookInput>
}

export interface GQLBookMarkedSearches {
  searchList?: Array<GQLBookmarkedSeachItem>
}

export interface GQLBookmarkSearchInput {
  userId: string
  name: string
  parameters: GQLAdvancedSearchParametersInput
}

export interface GQLRemoveBookmarkedSeachInput {
  userId: string
  searchId: string
}

export type GQLMap = any

export interface GQLRegistration {
  id?: string
  _fhirID?: string
  draftId?: string
  trackingId?: string
  registrationNumber?: string
  paperFormID?: string
  page?: string
  book?: string
  informantType?: string
  otherInformantType?: string
  assignment?: GQLAssignmentData
  contact?: string
  contactRelationship?: string
  informantsSignature?: string
  groomSignature?: string
  brideSignature?: string
  witnessOneSignature?: string
  witnessTwoSignature?: string
  contactPhoneNumber?: string
  contactEmail?: string
  status?: Array<GQLRegWorkflow | null>
  type?: GQLRegistrationType
  inCompleteFields?: string
  attachments?: Array<GQLAttachment | null>
  certificates?: Array<GQLCertificate | null>
  duplicates?: Array<GQLDuplicatesInfo | null>
}

export interface GQLRelatedPerson {
  id?: string
  _fhirID?: string
  _fhirIDPatient?: string
  relationship?: string
  otherRelationship?: string
  affidavit?: Array<GQLAttachment | null>
  identifier?: Array<GQLIdentityType | null>
  name?: Array<GQLHumanName | null>
  telecom?: Array<GQLContactPoint | null>
  gender?: string
  birthDate?: string
  age?: number
  maritalStatus?: string
  occupation?: string
  detailsExist?: boolean
  reasonNotApplying?: string
  dateOfMarriage?: GQLDate
  multipleBirth?: number
  address?: Array<GQLAddress | null>
  photo?: Array<GQLAttachment | null>
  deceased?: GQLDeceased
  nationality?: Array<string | null>
  educationalAttainment?: string
  ageOfIndividualInYears?: number
  exactDateOfBirthUnknown?: boolean
}

export interface GQLLocation {
  id: string
  _fhirID?: string
  identifier?: Array<GQLIdentifier>
  status?: string
  name?: string
  alias?: Array<string>
  description?: string
  partOf?: string
  type?: string
  telecom?: Array<GQLContactPoint | null>
  address?: GQLAddress
  longitude?: number
  latitude?: number
  altitude?: number
  geoData?: string
  hierarchy?: Array<GQLLocation>
}

export interface GQLQuestionnaireQuestion {
  fieldId?: string
  value?: string
}

export interface GQLHistory {
  user?: GQLUser
  date?: GQLDate
  regStatus?: GQLRegStatus
  ipAddress?: string
  action?: GQLRegAction
  note?: string
  statusReason?: GQLStatusReason
  reason?: string
  requester?: string
  requesterOther?: string
  hasShowedVerifiedDocument?: boolean
  certificateTemplateId?: string
  noSupportingDocumentationRequired?: boolean
  otherReason?: string
  system?: GQLIntegratedSystem
  location?: GQLLocation
  office?: GQLLocation
  dhis2Notification?: boolean
  comments?: Array<GQLComment | null>
  input?: Array<GQLInputOutput | null>
  output?: Array<GQLInputOutput | null>
  certificates?: Array<GQLCertificate | null>
  signature?: GQLSignature
  payment?: GQLPayment
  documents: Array<GQLAttachment>
  duplicateOf?: string
  potentialDuplicates?: Array<string>
}

export interface GQLIdentityType {
  id?: string
  type?: string
  otherType?: string
  fieldsModifiedByIdentity?: Array<string | null>
}

export interface GQLHumanName {
  use?: string
  firstNames?: string
  middleName?: string
  familyName?: string
  marriedLastName?: string
}

export interface GQLContactPoint {
  system?: string
  value?: string
  use?: string
}

export type GQLPlainDate = any

export interface GQLAddress {
  use?: string
  type?: string
  text?: string
  line?: Array<string | null>
  lineName?: Array<string | null>
  city?: string
  district?: string
  districtName?: string
  state?: string
  stateName?: string
  postalCode?: string
  country?: string
  from?: GQLDate
  to?: GQLDate
  partOf?: string
}

export interface GQLAttachment {
  id: string
  _fhirID?: string
  contentType?: string
  data?: string
  uri?: string
  status?: string
  originalFileName?: string
  systemFileName?: string
  type?: string
  description?: string
  subject?: string
  createdAt?: GQLDate
}

export interface GQLDeceased {
  deceased?: boolean
  deathDate?: GQLPlainDate
}

export interface GQLMedicalPractitioner {
  name?: string
  qualification?: string
  lastVisitDate?: GQLDate
}

export interface GQLStatusWiseRegistrationCount {
  status: string
  count: number
}

export const enum GQLStatus {
  active = 'active',
  deactivated = 'deactivated',
  pending = 'pending',
  disabled = 'disabled'
}

export interface GQLLocalRegistrar {
  name: Array<GQLHumanName | null>
  role?: string
  signature?: GQLSignature
}

export interface GQLIdentifier {
  system?: string
  value?: string
}

export interface GQLSignature {
  data?: string
  type?: string
}

export interface GQLBookmarkedSeachItem {
  searchId: string
  name: string
  parameters: GQLAdvancedSeachParameters
}

export interface GQLSearchFieldAgentResponse {
  practitionerId?: string
  fullName?: string
  role?: GQLUserRole
  status?: GQLStatus
  avatar?: GQLAvatar
  primaryOfficeId?: string
  creationDate?: string
  totalNumberOfDeclarationStarted?: number
  totalNumberOfInProgressAppStarted?: number
  totalNumberOfRejectedDeclarations?: number
  averageTimeForDeclaredDeclarations?: number
}

export interface GQLEstimation {
  totalEstimation: number
  maleEstimation: number
  femaleEstimation: number
  locationId: string
  locationLevel: string
}

export interface GQLEventMetrics {
  total: number
  gender: string
  eventLocationType: string
  timeLabel: string
  practitionerRole: string
}

export interface GQLTotalMetricsByRegistrar {
  results: Array<GQLEventMetricsByRegistrar>
  total?: number
}

export interface GQLTotalMetricsByLocation {
  results: Array<GQLEventMetricsByLocation>
  total?: number
}

export interface GQLTotalMetricsByTime {
  results: Array<GQLEventMetricsByTime>
  total?: number
}

export interface GQLVSExport {
  event: string
  startDate: GQLDate
  endDate: GQLDate
  fileSize: string
  url: string
  createdOn: GQLDate
}

export type GQLUserAuditLogResultItem =
  | GQLUserAuditLogItemWithComposition
  | GQLUserAuditLogItem

/** Use this to resolve union type UserAuditLogResultItem */
export type GQLPossibleUserAuditLogResultItemTypeNames =
  | 'UserAuditLogItemWithComposition'
  | 'UserAuditLogItem'

export interface GQLUserAuditLogResultItemNameMap {
  UserAuditLogResultItem: GQLUserAuditLogResultItem
  UserAuditLogItemWithComposition: GQLUserAuditLogItemWithComposition
  UserAuditLogItem: GQLUserAuditLogItem
}

export interface GQLEventSearchSet {
  id: string
  type?: string
  registration?: GQLRegistrationSearchSet
  operationHistories?: Array<GQLOperationHistorySearchSet | null>
}

/** Use this to resolve interface type EventSearchSet */
export type GQLPossibleEventSearchSetTypeNames =
  | 'BirthEventSearchSet'
  | 'DeathEventSearchSet'
  | 'MarriageEventSearchSet'

export interface GQLEventSearchSetNameMap {
  EventSearchSet: GQLEventSearchSet
  BirthEventSearchSet: GQLBirthEventSearchSet
  DeathEventSearchSet: GQLDeathEventSearchSet
  MarriageEventSearchSet: GQLMarriageEventSearchSet
}

export const enum GQLEventType {
  birth = 'birth',
  death = 'death',
  marriage = 'marriage'
}

export interface GQLEventProgressSet {
  id: string
  type?: string
  name?: Array<GQLHumanName | null>
  dateOfEvent?: GQLPlainDate
  registration?: GQLRegistrationSearchSet
  startedBy?: GQLUser
  startedByFacility?: string
  startedAt?: GQLDate
  progressReport?: GQLEventProgressData
}

export interface GQLI18nMessage {
  id: string
  defaultMessage: string
  description: string
}

export const enum GQLSystemStatus {
  active = 'active',
  deactivated = 'deactivated'
}

export const enum GQLSystemType {
  NATIONAL_ID = 'NATIONAL_ID',
  HEALTH = 'HEALTH',
  RECORD_SEARCH = 'RECORD_SEARCH',
  WEBHOOK = 'WEBHOOK'
}

export const enum GQLIntegratingSystemType {
  OTHER = 'OTHER'
}

export interface GQLSystemSettings {
  dailyQuota?: number
  webhook?: Array<GQLWebhookPermission>
  openIdProviderClientId?: string
  openIdProviderBaseUrl?: string
  openIdProviderClaims?: string
}

export interface GQLAttachmentInput {
  _fhirID?: string
  contentType?: string
  data?: string
  uri?: string
  status?: GQLAttachmentInputStatus
  originalFileName?: string
  systemFileName?: string
  type?: string
  description?: string
  subject?: string
  createdAt?: GQLDate
}

export interface GQLCorrectionPaymentInput {
  _fhirID?: string
  attachmentData?: string
  type: GQLPaymentType
  amount: number
  outcome: GQLPaymentOutcomeType
  date: GQLDate
}

export interface GQLCorrectionValueInput {
  section: string
  fieldName: string
  oldValue?: GQLFieldValue
  newValue: GQLFieldValue
}

export interface GQLLocationInput {
  _fhirID?: string
  identifier?: Array<string | null>
  status?: string
  name?: string
  alias?: Array<string | null>
  description?: string
  partOf?: string
  type?: string
  telecom?: Array<GQLContactPointInput | null>
  address?: GQLAddressInput
  longitude?: number
  latitude?: number
  altitude?: number
  geoData?: string
}

export interface GQLFHIRIDMap {
  composition?: string
  encounter?: string
  eventLocation?: string
  questionnaireResponse?: string
  observation?: GQLObservationFHIRIDS
}

export interface GQLRegistrationInput {
  _fhirID?: string
  draftId?: string
  trackingId?: string
  registrationNumber?: string
  paperFormID?: string
  page?: string
  book?: string
  informantsSignature?: string
  groomSignature?: string
  brideSignature?: string
  witnessOneSignature?: string
  witnessTwoSignature?: string
  informantType?: string
  otherInformantType?: string
  contactPhoneNumber?: string
  contactEmail?: string
  status?: Array<GQLRegWorkflowInput | null>
  type?: GQLRegistrationType
  inCompleteFields?: string
  attachments?: Array<GQLAttachmentInput>
  certificates?: Array<GQLCertificateInput | null>
  location?: GQLLocationInput
  correction?: GQLCorrectionInput
  changedValues?: Array<GQLCorrectionValueInput>
}

export interface GQLPersonInput {
  _fhirID?: string
  identifier?: Array<GQLIdentityInput | null>
  name?: Array<GQLHumanNameInput | null>
  telecom?: Array<GQLContactPointInput | null>
  gender?: GQLGender
  birthDate?: GQLPlainDate
  age?: number
  maritalStatus?: string
  occupation?: string
  detailsExist?: boolean
  reasonNotApplying?: string
  dateOfMarriage?: GQLPlainDate
  multipleBirth?: number
  address?: Array<GQLAddressInput | null>
  photo?: Array<GQLAttachmentInput>
  deceased?: GQLDeceasedInput
  nationality?: Array<string | null>
  educationalAttainment?: string
  ageOfIndividualInYears?: number
}

export interface GQLRelatedPersonInput {
  id?: string
  _fhirID?: string
  _fhirIDPatient?: string
  relationship?: string
  otherRelationship?: string
  affidavit?: Array<GQLAttachmentInput>
  exactDateOfBirthUnknown?: boolean
  identifier?: Array<GQLIdentityInput | null>
  name?: Array<GQLHumanNameInput | null>
  telecom?: Array<GQLContactPointInput | null>
  gender?: GQLGender
  birthDate?: string
  age?: number
  maritalStatus?: string
  occupation?: string
  detailsExist?: boolean
  reasonNotApplying?: string
  dateOfMarriage?: GQLDate
  multipleBirth?: number
  address?: Array<GQLAddressInput | null>
  photo?: Array<GQLAttachmentInput>
  deceased?: GQLDeceasedInput
  nationality?: Array<string | null>
  educationalAttainment?: string
  ageOfIndividualInYears?: number
}

export interface GQLQuestionnaireQuestionInput {
  fieldId?: string
  value?: string
}

export interface GQLMedicalPractitionerInput {
  name?: string
  qualification?: string
  lastVisitDate?: GQLDate
}

export const enum GQLRegStatus {
  IN_PROGRESS = 'IN_PROGRESS',
  ARCHIVED = 'ARCHIVED',
  DECLARED = 'DECLARED',
  DECLARATION_UPDATED = 'DECLARATION_UPDATED',
  WAITING_VALIDATION = 'WAITING_VALIDATION',
  CORRECTION_REQUESTED = 'CORRECTION_REQUESTED',
  VALIDATED = 'VALIDATED',
  REGISTERED = 'REGISTERED',
  CERTIFIED = 'CERTIFIED',
  REJECTED = 'REJECTED',
  ISSUED = 'ISSUED'
}

export interface GQLIdentifierInput {
  type: string
  value: string
}

export interface GQLHumanNameInput {
  use?: string
  firstNames?: string
  middleName?: string
  familyName?: string
  marriedLastName?: string
}

export interface GQLUserIdentifierInput {
  use?: string
  system?: string
  value?: string
}

export interface GQLSignatureInput {
  data: string
  type?: string
}

export interface GQLSystemSettingsInput {
  dailyQuota?: number
  webhook?: Array<GQLWebhookInput | null>
}

export interface GQLWebhookInput {
  event: string
  permissions: Array<string | null>
}

export interface GQLAssignmentData {
  practitionerId?: string
  firstName?: string
  lastName?: string
  officeName?: string
  avatarURL: string
}

export interface GQLRegWorkflow {
  id: string
  type?: GQLRegStatus
  user?: GQLUser
  timestamp?: GQLDate
  comments?: Array<GQLComment | null>
  reason?: string
  location?: GQLLocation
  office?: GQLLocation
  timeLogged?: number
}

export const enum GQLRegistrationType {
  BIRTH = 'BIRTH',
  DEATH = 'DEATH',
  MARRIAGE = 'MARRIAGE'
}

export interface GQLCertificate {
  collector?: GQLRelatedPerson
  certifier?: GQLUser
  hasShowedVerifiedDocument?: boolean
  payments?: Array<GQLPayment | null>
  certificateTemplateId?: string
}

export interface GQLDuplicatesInfo {
  compositionId?: string
  trackingId?: string
}

export const enum GQLRegAction {
  VERIFIED = 'VERIFIED',
  ASSIGNED = 'ASSIGNED',
  UNASSIGNED = 'UNASSIGNED',
  REINSTATED = 'REINSTATED',
  REQUESTED_CORRECTION = 'REQUESTED_CORRECTION',
  APPROVED_CORRECTION = 'APPROVED_CORRECTION',
  REJECTED_CORRECTION = 'REJECTED_CORRECTION',
  CORRECTED = 'CORRECTED',
  DOWNLOADED = 'DOWNLOADED',
  VIEWED = 'VIEWED',
  MARKED_AS_DUPLICATE = 'MARKED_AS_DUPLICATE',
  MARKED_AS_NOT_DUPLICATE = 'MARKED_AS_NOT_DUPLICATE',
  FLAGGED_AS_POTENTIAL_DUPLICATE = 'FLAGGED_AS_POTENTIAL_DUPLICATE'
}

export interface GQLStatusReason {
  text?: string
}

export interface GQLIntegratedSystem {
  name?: string
  username?: string
  type?: string
}

export interface GQLComment {
  id: string
  user?: GQLUser
  comment?: string
  createdAt?: GQLDate
}

export interface GQLInputOutput {
  valueCode: string
  valueId: string
  value: GQLFieldValue
}

export interface GQLPayment {
  id: string
  type: GQLPaymentType
  amount: number
  outcome: GQLPaymentOutcomeType
  date: GQLDate
  attachmentURL?: string
}

export interface GQLAdvancedSeachParameters {
  event?: GQLEventType
  name?: string
  registrationStatuses?: Array<string | null>
  dateOfEvent?: string
  dateOfEventStart?: string
  dateOfEventEnd?: string
  timePeriodFrom?: string
  contactNumber?: string
  contactEmail?: string
  nationalId?: string
  registrationNumber?: string
  trackingId?: string
  dateOfRegistration?: string
  dateOfRegistrationStart?: string
  dateOfRegistrationEnd?: string
  declarationLocationId?: string
  declarationJurisdictionId?: string
  eventLocationId?: string
  eventCountry?: string
  eventLocationLevel1?: string
  eventLocationLevel2?: string
  eventLocationLevel3?: string
  eventLocationLevel4?: string
  eventLocationLevel5?: string
  eventLocationLevel6?: string
  childFirstNames?: string
  childLastName?: string
  childDoB?: string
  childDoBStart?: string
  childDoBEnd?: string
  childGender?: string
  childIdentifier?: string
  deceasedFirstNames?: string
  deceasedFamilyName?: string
  deceasedGender?: string
  deceasedDoB?: string
  deceasedDoBStart?: string
  deceasedDoBEnd?: string
  deceasedIdentifier?: string
  motherFirstNames?: string
  motherFamilyName?: string
  motherDoB?: string
  motherDoBStart?: string
  motherDoBEnd?: string
  motherIdentifier?: string
  fatherFirstNames?: string
  fatherFamilyName?: string
  fatherDoB?: string
  fatherDoBStart?: string
  fatherDoBEnd?: string
  fatherIdentifier?: string
  informantFirstNames?: string
  informantFamilyName?: string
  informantDoB?: string
  informantDoBStart?: string
  informantDoBEnd?: string
  informantIdentifier?: string
  compositionType?: Array<string | null>
}

export interface GQLEventMetricsByRegistrar {
  registrarPractitioner: GQLUser
  total: number
  late: number
  delayed: number
}

export interface GQLEventMetricsByLocation {
  location: GQLLocation
  total: number
  late: number
  delayed: number
  home: number
  healthFacility: number
}

export interface GQLEventMetricsByTime {
  total: number
  late: number
  delayed: number
  home: number
  healthFacility: number
  month: string
  time: string
}

export interface GQLUserAuditLogItemWithComposition
  extends GQLAuditLogItemBase {
  time: string
  ipAddress: string
  userAgent: string
  action: string
  practitionerId: string
  data: GQLAdditionalIdWithCompositionId
}

export interface GQLUserAuditLogItem extends GQLAuditLogItemBase {
  time: string
  ipAddress: string
  userAgent: string
  action: string
  practitionerId: string
}

export interface GQLRegistrationSearchSet {
  status?: string
  contactNumber?: string
  contactEmail?: string
  contactRelationship?: string
  dateOfDeclaration?: GQLDate
  trackingId?: string
  registrationNumber?: string
  eventLocationId?: string
  registeredLocationId?: string
  reason?: string
  comment?: string
  duplicates?: Array<string | null>
  createdAt?: string
  modifiedAt?: string
  assignment?: GQLAssignmentData
}

export interface GQLOperationHistorySearchSet {
  operationType?: string
  operatedOn?: GQLDate
  operatorRole?: string
  operatorName?: Array<GQLHumanName | null>
  operatorOfficeName?: string
  operatorOfficeAlias?: Array<string | null>
  notificationFacilityName?: string
  notificationFacilityAlias?: Array<string | null>
  rejectReason?: string
  rejectComment?: string
}

export interface GQLBirthEventSearchSet extends GQLEventSearchSet {
  id: string
  type?: string
  childName?: Array<GQLHumanName | null>
  childIdentifier?: string
  dateOfBirth?: GQLPlainDate
  registration?: GQLRegistrationSearchSet
  operationHistories?: Array<GQLOperationHistorySearchSet | null>
  placeOfBirth?: string
  childGender?: string
  mothersFirstName?: string
  mothersLastName?: string
  fathersFirstName?: string
  fathersLastName?: string
  motherDateOfBirth?: string
  fatherDateOfBirth?: string
  motherIdentifier?: string
  fatherIdentifier?: string
}

export interface GQLDeathEventSearchSet extends GQLEventSearchSet {
  id: string
  type?: string
  deceasedGender?: string
  deceasedName?: Array<GQLHumanName | null>
  dateOfDeath?: GQLPlainDate
  registration?: GQLRegistrationSearchSet
  operationHistories?: Array<GQLOperationHistorySearchSet | null>
}

export interface GQLMarriageEventSearchSet extends GQLEventSearchSet {
  id: string
  type?: string
  brideName?: Array<GQLHumanName | null>
  groomName?: Array<GQLHumanName | null>
  brideIdentifier?: string
  groomIdentifier?: string
  dateOfMarriage?: GQLPlainDate
  registration?: GQLRegistrationSearchSet
  operationHistories?: Array<GQLOperationHistorySearchSet | null>
}

export interface GQLEventProgressData {
  timeInProgress?: number
  timeInReadyForReview?: number
  timeInRequiresUpdates?: number
  timeInWaitingForApproval?: number
  timeInWaitingForBRIS?: number
  timeInReadyToPrint?: number
}

export interface GQLWebhookPermission {
  event: string
  permissions: Array<string>
}

export const enum GQLAttachmentInputStatus {
  approved = 'approved',
  validated = 'validated',
  deleted = 'deleted'
}

export const enum GQLPaymentType {
  MANUAL = 'MANUAL'
}

export const enum GQLPaymentOutcomeType {
  COMPLETED = 'COMPLETED',
  ERROR = 'ERROR',
  PARTIAL = 'PARTIAL'
}

export type GQLFieldValue = any

export interface GQLContactPointInput {
  system?: GQLTelecomSystem
  value?: string
  use?: GQLTelecomUse
}

export interface GQLAddressInput {
  use?: GQLAddressUse
  type?: GQLAddressType
  text?: string
  line?: Array<string>
  city?: string
  district?: string
  state?: string
  postalCode?: string
  country?: string
  from?: GQLDate
  to?: GQLDate
  partOf?: string
}

export interface GQLObservationFHIRIDS {
  maleDependentsOfDeceased?: string
  femaleDependentsOfDeceased?: string
  mannerOfDeath?: string
  deathDescription?: string
  causeOfDeathEstablished?: string
  causeOfDeathMethod?: string
  causeOfDeath?: string
  birthType?: string
  typeOfMarriage?: string
  weightAtBirth?: string
  attendantAtBirth?: string
  childrenBornAliveToMother?: string
  foetalDeathsToMother?: string
  lastPreviousLiveBirth?: string
}

export interface GQLRegWorkflowInput {
  type?: GQLRegStatus
  user?: GQLUserInput
  timestamp?: GQLDate
  reason?: string
  comments?: Array<GQLCommentInput | null>
  location?: GQLLocationInput
  timeLoggedMS?: number
}

export interface GQLCertificateInput {
  collector?: GQLRelatedPersonInput
  hasShowedVerifiedDocument?: boolean
  payments?: Array<GQLPaymentInput | null>
  certificateTemplateId?: string
}

export interface GQLIdentityInput {
  id?: string
  type?: string
  otherType?: string
  fieldsModifiedByIdentity?: Array<string | null>
}

export const enum GQLGender {
  male = 'male',
  female = 'female',
  other = 'other',
  unknown = 'unknown'
}

export interface GQLDeceasedInput {
  deceased?: boolean
  deathDate?: GQLPlainDate
}

export interface GQLAuditLogItemBase {
  time: string
  ipAddress: string
  userAgent: string
  action: string
  practitionerId: string
}

/** Use this to resolve interface type AuditLogItemBase */
export type GQLPossibleAuditLogItemBaseTypeNames =
  | 'UserAuditLogItemWithComposition'
  | 'UserAuditLogItem'

export interface GQLAuditLogItemBaseNameMap {
  AuditLogItemBase: GQLAuditLogItemBase
  UserAuditLogItemWithComposition: GQLUserAuditLogItemWithComposition
  UserAuditLogItem: GQLUserAuditLogItem
}

export interface GQLAdditionalIdWithCompositionId {
  compositionId: string
  trackingId: string
}

export const enum GQLTelecomSystem {
  other = 'other',
  phone = 'phone',
  fax = 'fax',
  email = 'email',
  pager = 'pager',
  url = 'url',
  sms = 'sms'
}

export const enum GQLTelecomUse {
  home = 'home',
  work = 'work',
  temp = 'temp',
  old = 'old',
  mobile = 'mobile'
}

export const enum GQLAddressUse {
  home = 'home',
  work = 'work',
  temp = 'temp',
  old = 'old'
}

export const enum GQLAddressType {
  PRIMARY_ADDRESS = 'PRIMARY_ADDRESS',
  SECONDARY_ADDRESS = 'SECONDARY_ADDRESS',
  postal = 'postal',
  physical = 'physical',
  both = 'both'
}

export interface GQLCommentInput {
  user?: GQLUserInput
  comment?: string
  createdAt?: GQLDate
}

export interface GQLPaymentInput {
  paymentId?: string
  type?: GQLPaymentType
  amount?: number
  outcome?: GQLPaymentOutcomeType
  date?: GQLDate
  data?: string
}

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface GQLResolver {
  Query?: GQLQueryTypeResolver
  Mutation?: GQLMutationTypeResolver
  Dummy?: GQLDummyTypeResolver
  NotificationResult?: GQLNotificationResultTypeResolver
  BirthRegistration?: GQLBirthRegistrationTypeResolver
  Person?: GQLPersonTypeResolver
  BirthRegResultSet?: GQLBirthRegResultSetTypeResolver
  Date?: GraphQLScalarType
  DeathRegistration?: GQLDeathRegistrationTypeResolver
  EventRegistration?: {
    __resolveType: GQLEventRegistrationTypeResolver
  }

  RegistrationCountResult?: GQLRegistrationCountResultTypeResolver
  MarriageRegistration?: GQLMarriageRegistrationTypeResolver
  RecordDetails?: {
    __resolveType: GQLRecordDetailsTypeResolver
  }

  User?: GQLUserTypeResolver
  SearchUserResult?: GQLSearchUserResultTypeResolver
  SearchFieldAgentResult?: GQLSearchFieldAgentResultTypeResolver
  VerifyPasswordResult?: GQLVerifyPasswordResultTypeResolver
  TotalMetricsResult?: GQLTotalMetricsResultTypeResolver
  MixedTotalMetricsResult?: {
    __resolveType: GQLMixedTotalMetricsResultTypeResolver
  }

  TotalVSExport?: GQLTotalVSExportTypeResolver
  PaymentMetric?: GQLPaymentMetricTypeResolver
  CertificationMetric?: GQLCertificationMetricTypeResolver
  CorrectionMetric?: GQLCorrectionMetricTypeResolver
  LocationStatisticsResponse?: GQLLocationStatisticsResponseTypeResolver
  DeclarationsStartedMetrics?: GQLDeclarationsStartedMetricsTypeResolver
  MonthWiseEstimationMetric?: GQLMonthWiseEstimationMetricTypeResolver
  LocationWiseEstimationMetric?: GQLLocationWiseEstimationMetricTypeResolver
  UserAuditLogResultSet?: GQLUserAuditLogResultSetTypeResolver
  EventSearchResultSet?: GQLEventSearchResultSetTypeResolver
  EventProgressResultSet?: GQLEventProgressResultSetTypeResolver
  UserRole?: GQLUserRoleTypeResolver
  System?: GQLSystemTypeResolver
  CreatedIds?: GQLCreatedIdsTypeResolver
  Reinstated?: GQLReinstatedTypeResolver
  Avatar?: GQLAvatarTypeResolver
  SystemSecret?: GQLSystemSecretTypeResolver
  BookMarkedSearches?: GQLBookMarkedSearchesTypeResolver
  Map?: GraphQLScalarType
  Registration?: GQLRegistrationTypeResolver
  RelatedPerson?: GQLRelatedPersonTypeResolver
  Location?: GQLLocationTypeResolver
  QuestionnaireQuestion?: GQLQuestionnaireQuestionTypeResolver
  History?: GQLHistoryTypeResolver
  IdentityType?: GQLIdentityTypeTypeResolver
  HumanName?: GQLHumanNameTypeResolver
  ContactPoint?: GQLContactPointTypeResolver
  PlainDate?: GraphQLScalarType
  Address?: GQLAddressTypeResolver
  Attachment?: GQLAttachmentTypeResolver
  Deceased?: GQLDeceasedTypeResolver
  MedicalPractitioner?: GQLMedicalPractitionerTypeResolver
  StatusWiseRegistrationCount?: GQLStatusWiseRegistrationCountTypeResolver
  LocalRegistrar?: GQLLocalRegistrarTypeResolver
  Identifier?: GQLIdentifierTypeResolver
  Signature?: GQLSignatureTypeResolver
  BookmarkedSeachItem?: GQLBookmarkedSeachItemTypeResolver
  SearchFieldAgentResponse?: GQLSearchFieldAgentResponseTypeResolver
  Estimation?: GQLEstimationTypeResolver
  EventMetrics?: GQLEventMetricsTypeResolver
  TotalMetricsByRegistrar?: GQLTotalMetricsByRegistrarTypeResolver
  TotalMetricsByLocation?: GQLTotalMetricsByLocationTypeResolver
  TotalMetricsByTime?: GQLTotalMetricsByTimeTypeResolver
  VSExport?: GQLVSExportTypeResolver
  UserAuditLogResultItem?: {
    __resolveType: GQLUserAuditLogResultItemTypeResolver
  }

  EventSearchSet?: {
    __resolveType: GQLEventSearchSetTypeResolver
  }

  EventProgressSet?: GQLEventProgressSetTypeResolver
  I18nMessage?: GQLI18nMessageTypeResolver
  SystemSettings?: GQLSystemSettingsTypeResolver
  AssignmentData?: GQLAssignmentDataTypeResolver
  RegWorkflow?: GQLRegWorkflowTypeResolver
  Certificate?: GQLCertificateTypeResolver
  DuplicatesInfo?: GQLDuplicatesInfoTypeResolver
  StatusReason?: GQLStatusReasonTypeResolver
  IntegratedSystem?: GQLIntegratedSystemTypeResolver
  Comment?: GQLCommentTypeResolver
  InputOutput?: GQLInputOutputTypeResolver
  Payment?: GQLPaymentTypeResolver
  AdvancedSeachParameters?: GQLAdvancedSeachParametersTypeResolver
  EventMetricsByRegistrar?: GQLEventMetricsByRegistrarTypeResolver
  EventMetricsByLocation?: GQLEventMetricsByLocationTypeResolver
  EventMetricsByTime?: GQLEventMetricsByTimeTypeResolver
  UserAuditLogItemWithComposition?: GQLUserAuditLogItemWithCompositionTypeResolver
  UserAuditLogItem?: GQLUserAuditLogItemTypeResolver
  RegistrationSearchSet?: GQLRegistrationSearchSetTypeResolver
  OperationHistorySearchSet?: GQLOperationHistorySearchSetTypeResolver
  BirthEventSearchSet?: GQLBirthEventSearchSetTypeResolver
  DeathEventSearchSet?: GQLDeathEventSearchSetTypeResolver
  MarriageEventSearchSet?: GQLMarriageEventSearchSetTypeResolver
  EventProgressData?: GQLEventProgressDataTypeResolver
  WebhookPermission?: GQLWebhookPermissionTypeResolver
  FieldValue?: GraphQLScalarType
  AuditLogItemBase?: {
    __resolveType: GQLAuditLogItemBaseTypeResolver
  }

  AdditionalIdWithCompositionId?: GQLAdditionalIdWithCompositionIdTypeResolver
}
export interface GQLQueryTypeResolver<TParent = any> {
  sendNotificationToAllUsers?: QueryToSendNotificationToAllUsersResolver<TParent>
  fetchBirthRegistration?: QueryToFetchBirthRegistrationResolver<TParent>
  queryRegistrationByIdentifier?: QueryToQueryRegistrationByIdentifierResolver<TParent>
  queryPersonByIdentifier?: QueryToQueryPersonByIdentifierResolver<TParent>
  listBirthRegistrations?: QueryToListBirthRegistrationsResolver<TParent>
  fetchDeathRegistration?: QueryToFetchDeathRegistrationResolver<TParent>
  fetchEventRegistration?: QueryToFetchEventRegistrationResolver<TParent>
  fetchRegistration?: QueryToFetchRegistrationResolver<TParent>
  fetchRegistrationForViewing?: QueryToFetchRegistrationForViewingResolver<TParent>
  queryPersonByNidIdentifier?: QueryToQueryPersonByNidIdentifierResolver<TParent>
  fetchRegistrationCountByStatus?: QueryToFetchRegistrationCountByStatusResolver<TParent>
  fetchMarriageRegistration?: QueryToFetchMarriageRegistrationResolver<TParent>
  fetchRecordDetailsForVerification?: QueryToFetchRecordDetailsForVerificationResolver<TParent>
  isLeafLevelLocation?: QueryToIsLeafLevelLocationResolver<TParent>
  getUser?: QueryToGetUserResolver<TParent>
  getUserByMobile?: QueryToGetUserByMobileResolver<TParent>
  getUserByEmail?: QueryToGetUserByEmailResolver<TParent>
  searchUsers?: QueryToSearchUsersResolver<TParent>
  searchFieldAgents?: QueryToSearchFieldAgentsResolver<TParent>
  verifyPasswordById?: QueryToVerifyPasswordByIdResolver<TParent>
  getTotalMetrics?: QueryToGetTotalMetricsResolver<TParent>
  getRegistrationsListByFilter?: QueryToGetRegistrationsListByFilterResolver<TParent>
  getVSExports?: QueryToGetVSExportsResolver<TParent>
  getTotalPayments?: QueryToGetTotalPaymentsResolver<TParent>
  getTotalCertifications?: QueryToGetTotalCertificationsResolver<TParent>
  getTotalCorrections?: QueryToGetTotalCorrectionsResolver<TParent>
  getLocationStatistics?: QueryToGetLocationStatisticsResolver<TParent>
  getDeclarationsStartedMetrics?: QueryToGetDeclarationsStartedMetricsResolver<TParent>
  fetchMonthWiseEventMetrics?: QueryToFetchMonthWiseEventMetricsResolver<TParent>
  fetchLocationWiseEventMetrics?: QueryToFetchLocationWiseEventMetricsResolver<TParent>
  getUserAuditLog?: QueryToGetUserAuditLogResolver<TParent>
  searchEvents?: QueryToSearchEventsResolver<TParent>
  getEventsWithProgress?: QueryToGetEventsWithProgressResolver<TParent>
  getUserRoles?: QueryToGetUserRolesResolver<TParent>
  fetchSystem?: QueryToFetchSystemResolver<TParent>
}

export interface QueryToSendNotificationToAllUsersArgs {
  subject: string
  body: string
  locale: string
  type?: GQLNotificationType
}
export interface QueryToSendNotificationToAllUsersResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToSendNotificationToAllUsersArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToFetchBirthRegistrationArgs {
  id: string
}
export interface QueryToFetchBirthRegistrationResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToFetchBirthRegistrationArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToQueryRegistrationByIdentifierArgs {
  identifier: string
}
export interface QueryToQueryRegistrationByIdentifierResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToQueryRegistrationByIdentifierArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToQueryPersonByIdentifierArgs {
  identifier: string
}
export interface QueryToQueryPersonByIdentifierResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToQueryPersonByIdentifierArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToListBirthRegistrationsArgs {
  locationIds?: Array<string | null>
  status?: string
  userId?: string
  from?: GQLDate
  to?: GQLDate
  count?: number
  skip?: number
}
export interface QueryToListBirthRegistrationsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToListBirthRegistrationsArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToFetchDeathRegistrationArgs {
  id: string
}
export interface QueryToFetchDeathRegistrationResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToFetchDeathRegistrationArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToFetchEventRegistrationArgs {
  id: string
}
export interface QueryToFetchEventRegistrationResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToFetchEventRegistrationArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToFetchRegistrationArgs {
  id: string
}
export interface QueryToFetchRegistrationResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToFetchRegistrationArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToFetchRegistrationForViewingArgs {
  id: string
}
export interface QueryToFetchRegistrationForViewingResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToFetchRegistrationForViewingArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToQueryPersonByNidIdentifierArgs {
  dob?: string
  nid?: string
  country?: string
}
export interface QueryToQueryPersonByNidIdentifierResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToQueryPersonByNidIdentifierArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToFetchRegistrationCountByStatusArgs {
  status: Array<string | null>
  locationId?: string
  event?: string
}
export interface QueryToFetchRegistrationCountByStatusResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToFetchRegistrationCountByStatusArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToFetchMarriageRegistrationArgs {
  id: string
}
export interface QueryToFetchMarriageRegistrationResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToFetchMarriageRegistrationArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToFetchRecordDetailsForVerificationArgs {
  id: string
}
export interface QueryToFetchRecordDetailsForVerificationResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToFetchRecordDetailsForVerificationArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToIsLeafLevelLocationArgs {
  locationId: string
}
export interface QueryToIsLeafLevelLocationResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToIsLeafLevelLocationArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToGetUserArgs {
  userId: string
}
export interface QueryToGetUserResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToGetUserArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToGetUserByMobileArgs {
  mobile: string
}
export interface QueryToGetUserByMobileResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToGetUserByMobileArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToGetUserByEmailArgs {
  email: string
}
export interface QueryToGetUserByEmailResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToGetUserByEmailArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToSearchUsersArgs {
  username?: string
  mobile?: string
  email?: string
  status?: string
  primaryOfficeId?: string
  locationId?: string
  count?: number
  skip?: number
  sort?: string
}
export interface QueryToSearchUsersResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToSearchUsersArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToSearchFieldAgentsArgs {
  locationId?: string
  primaryOfficeId?: string
  status?: string
  language?: string
  timeStart: string
  timeEnd: string
  event?: string
  count?: number
  skip?: number
  sort?: string
}
export interface QueryToSearchFieldAgentsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToSearchFieldAgentsArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToVerifyPasswordByIdArgs {
  id: string
  password: string
}
export interface QueryToVerifyPasswordByIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToVerifyPasswordByIdArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToGetTotalMetricsArgs {
  timeStart: string
  timeEnd: string
  locationId?: string
  event: string
}
export interface QueryToGetTotalMetricsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToGetTotalMetricsArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToGetRegistrationsListByFilterArgs {
  timeStart: string
  timeEnd: string
  locationId?: string
  event: string
  filterBy: string
  skip: number
  size: number
}
export interface QueryToGetRegistrationsListByFilterResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToGetRegistrationsListByFilterArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToGetVSExportsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToGetTotalPaymentsArgs {
  timeStart: string
  timeEnd: string
  locationId?: string
  event: string
}
export interface QueryToGetTotalPaymentsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToGetTotalPaymentsArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToGetTotalCertificationsArgs {
  timeStart: string
  timeEnd: string
  locationId?: string
}
export interface QueryToGetTotalCertificationsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToGetTotalCertificationsArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToGetTotalCorrectionsArgs {
  timeStart: string
  timeEnd: string
  locationId?: string
  event: string
}
export interface QueryToGetTotalCorrectionsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToGetTotalCorrectionsArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToGetLocationStatisticsArgs {
  locationId?: string
  populationYear: number
}
export interface QueryToGetLocationStatisticsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToGetLocationStatisticsArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToGetDeclarationsStartedMetricsArgs {
  timeStart: string
  timeEnd: string
  locationId: string
}
export interface QueryToGetDeclarationsStartedMetricsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToGetDeclarationsStartedMetricsArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToFetchMonthWiseEventMetricsArgs {
  timeStart: string
  timeEnd: string
  locationId?: string
  event: string
}
export interface QueryToFetchMonthWiseEventMetricsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToFetchMonthWiseEventMetricsArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToFetchLocationWiseEventMetricsArgs {
  timeStart: string
  timeEnd: string
  locationId?: string
  event: string
}
export interface QueryToFetchLocationWiseEventMetricsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToFetchLocationWiseEventMetricsArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToGetUserAuditLogArgs {
  practitionerId: string
  skip?: number
  count: number
  timeStart?: string
  timeEnd?: string
}
export interface QueryToGetUserAuditLogResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToGetUserAuditLogArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToSearchEventsArgs {
  userId?: string
  advancedSearchParameters: GQLAdvancedSearchParametersInput
  count?: number
  skip?: number
  sort?: string
  sortColumn?: string
  sortBy?: Array<GQLSortBy>
}
export interface QueryToSearchEventsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToSearchEventsArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToGetEventsWithProgressArgs {
  declarationJurisdictionId?: string
  registrationStatuses?: Array<string | null>
  compositionType?: Array<string | null>
  count?: number
  skip?: number
  sort?: string
}
export interface QueryToGetEventsWithProgressResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToGetEventsWithProgressArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToGetUserRolesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToFetchSystemArgs {
  clientId: string
}
export interface QueryToFetchSystemResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToFetchSystemArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLMutationTypeResolver<TParent = any> {
  requestRegistrationCorrection?: MutationToRequestRegistrationCorrectionResolver<TParent>
  rejectRegistrationCorrection?: MutationToRejectRegistrationCorrectionResolver<TParent>
  approveBirthRegistrationCorrection?: MutationToApproveBirthRegistrationCorrectionResolver<TParent>
  approveDeathRegistrationCorrection?: MutationToApproveDeathRegistrationCorrectionResolver<TParent>
  approveMarriageRegistrationCorrection?: MutationToApproveMarriageRegistrationCorrectionResolver<TParent>
  createBirthRegistrationCorrection?: MutationToCreateBirthRegistrationCorrectionResolver<TParent>
  createDeathRegistrationCorrection?: MutationToCreateDeathRegistrationCorrectionResolver<TParent>
  createMarriageRegistrationCorrection?: MutationToCreateMarriageRegistrationCorrectionResolver<TParent>
  createBirthRegistration?: MutationToCreateBirthRegistrationResolver<TParent>
  markBirthAsVerified?: MutationToMarkBirthAsVerifiedResolver<TParent>
  markBirthAsValidated?: MutationToMarkBirthAsValidatedResolver<TParent>
  markBirthAsRegistered?: MutationToMarkBirthAsRegisteredResolver<TParent>
  markBirthAsCertified?: MutationToMarkBirthAsCertifiedResolver<TParent>
  markBirthAsIssued?: MutationToMarkBirthAsIssuedResolver<TParent>
  markEventAsVoided?: MutationToMarkEventAsVoidedResolver<TParent>
  markEventAsReinstated?: MutationToMarkEventAsReinstatedResolver<TParent>
  markEventAsNotDuplicate?: MutationToMarkEventAsNotDuplicateResolver<TParent>
  markEventAsArchived?: MutationToMarkEventAsArchivedResolver<TParent>
  createDeathRegistration?: MutationToCreateDeathRegistrationResolver<TParent>
  updateDeathRegistration?: MutationToUpdateDeathRegistrationResolver<TParent>
  markDeathAsVerified?: MutationToMarkDeathAsVerifiedResolver<TParent>
  markDeathAsValidated?: MutationToMarkDeathAsValidatedResolver<TParent>
  markDeathAsRegistered?: MutationToMarkDeathAsRegisteredResolver<TParent>
  markDeathAsCertified?: MutationToMarkDeathAsCertifiedResolver<TParent>
  markDeathAsIssued?: MutationToMarkDeathAsIssuedResolver<TParent>
  markEventAsUnassigned?: MutationToMarkEventAsUnassignedResolver<TParent>
  createMarriageRegistration?: MutationToCreateMarriageRegistrationResolver<TParent>
  markMarriageAsValidated?: MutationToMarkMarriageAsValidatedResolver<TParent>
  markMarriageAsRegistered?: MutationToMarkMarriageAsRegisteredResolver<TParent>
  markMarriageAsCertified?: MutationToMarkMarriageAsCertifiedResolver<TParent>
  markMarriageAsIssued?: MutationToMarkMarriageAsIssuedResolver<TParent>
  markEventAsDuplicate?: MutationToMarkEventAsDuplicateResolver<TParent>
  confirmRegistration?: MutationToConfirmRegistrationResolver<TParent>
  rejectRegistration?: MutationToRejectRegistrationResolver<TParent>
  upsertRegistrationIdentifier?: MutationToUpsertRegistrationIdentifierResolver<TParent>
  createOrUpdateUser?: MutationToCreateOrUpdateUserResolver<TParent>
  activateUser?: MutationToActivateUserResolver<TParent>
  changePassword?: MutationToChangePasswordResolver<TParent>
  changePhone?: MutationToChangePhoneResolver<TParent>
  changeEmail?: MutationToChangeEmailResolver<TParent>
  changeAvatar?: MutationToChangeAvatarResolver<TParent>
  auditUser?: MutationToAuditUserResolver<TParent>
  resendInvite?: MutationToResendInviteResolver<TParent>
  usernameReminder?: MutationToUsernameReminderResolver<TParent>
  resetPasswordInvite?: MutationToResetPasswordInviteResolver<TParent>
  reactivateSystem?: MutationToReactivateSystemResolver<TParent>
  deactivateSystem?: MutationToDeactivateSystemResolver<TParent>
  registerSystem?: MutationToRegisterSystemResolver<TParent>
  refreshSystemSecret?: MutationToRefreshSystemSecretResolver<TParent>
  updatePermissions?: MutationToUpdatePermissionsResolver<TParent>
  deleteSystem?: MutationToDeleteSystemResolver<TParent>
  bookmarkAdvancedSearch?: MutationToBookmarkAdvancedSearchResolver<TParent>
  removeBookmarkedAdvancedSearch?: MutationToRemoveBookmarkedAdvancedSearchResolver<TParent>
}

export interface MutationToRequestRegistrationCorrectionArgs {
  id: string
  details: GQLCorrectionInput
}
export interface MutationToRequestRegistrationCorrectionResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToRequestRegistrationCorrectionArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToRejectRegistrationCorrectionArgs {
  id: string
  details: GQLCorrectionRejectionInput
}
export interface MutationToRejectRegistrationCorrectionResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToRejectRegistrationCorrectionArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToApproveBirthRegistrationCorrectionArgs {
  id: string
  details: GQLBirthRegistrationInput
}
export interface MutationToApproveBirthRegistrationCorrectionResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToApproveBirthRegistrationCorrectionArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToApproveDeathRegistrationCorrectionArgs {
  id: string
  details: GQLDeathRegistrationInput
}
export interface MutationToApproveDeathRegistrationCorrectionResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToApproveDeathRegistrationCorrectionArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToApproveMarriageRegistrationCorrectionArgs {
  id: string
  details: GQLMarriageRegistrationInput
}
export interface MutationToApproveMarriageRegistrationCorrectionResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToApproveMarriageRegistrationCorrectionArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToCreateBirthRegistrationCorrectionArgs {
  id: string
  details: GQLBirthRegistrationInput
}
export interface MutationToCreateBirthRegistrationCorrectionResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateBirthRegistrationCorrectionArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToCreateDeathRegistrationCorrectionArgs {
  id: string
  details: GQLDeathRegistrationInput
}
export interface MutationToCreateDeathRegistrationCorrectionResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateDeathRegistrationCorrectionArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToCreateMarriageRegistrationCorrectionArgs {
  id: string
  details: GQLMarriageRegistrationInput
}
export interface MutationToCreateMarriageRegistrationCorrectionResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateMarriageRegistrationCorrectionArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToCreateBirthRegistrationArgs {
  details: GQLBirthRegistrationInput
}
export interface MutationToCreateBirthRegistrationResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateBirthRegistrationArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToMarkBirthAsVerifiedArgs {
  id: string
  details?: GQLBirthRegistrationInput
}
export interface MutationToMarkBirthAsVerifiedResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToMarkBirthAsVerifiedArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToMarkBirthAsValidatedArgs {
  id: string
  details?: GQLBirthRegistrationInput
}
export interface MutationToMarkBirthAsValidatedResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToMarkBirthAsValidatedArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToMarkBirthAsRegisteredArgs {
  id: string
  details: GQLBirthRegistrationInput
}
export interface MutationToMarkBirthAsRegisteredResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToMarkBirthAsRegisteredArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToMarkBirthAsCertifiedArgs {
  id: string
  details: GQLBirthRegistrationInput
}
export interface MutationToMarkBirthAsCertifiedResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToMarkBirthAsCertifiedArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToMarkBirthAsIssuedArgs {
  id: string
  details: GQLBirthRegistrationInput
}
export interface MutationToMarkBirthAsIssuedResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToMarkBirthAsIssuedArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToMarkEventAsVoidedArgs {
  id: string
  reason: string
  comment: string
}
export interface MutationToMarkEventAsVoidedResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToMarkEventAsVoidedArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToMarkEventAsReinstatedArgs {
  id: string
}
export interface MutationToMarkEventAsReinstatedResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToMarkEventAsReinstatedArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToMarkEventAsNotDuplicateArgs {
  id: string
}
export interface MutationToMarkEventAsNotDuplicateResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToMarkEventAsNotDuplicateArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToMarkEventAsArchivedArgs {
  id: string
  reason?: string
  comment?: string
  duplicateTrackingId?: string
}
export interface MutationToMarkEventAsArchivedResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToMarkEventAsArchivedArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToCreateDeathRegistrationArgs {
  details: GQLDeathRegistrationInput
}
export interface MutationToCreateDeathRegistrationResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateDeathRegistrationArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToUpdateDeathRegistrationArgs {
  id: string
  details: GQLDeathRegistrationInput
}
export interface MutationToUpdateDeathRegistrationResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateDeathRegistrationArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToMarkDeathAsVerifiedArgs {
  id: string
  details?: GQLDeathRegistrationInput
}
export interface MutationToMarkDeathAsVerifiedResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToMarkDeathAsVerifiedArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToMarkDeathAsValidatedArgs {
  id: string
  details?: GQLDeathRegistrationInput
}
export interface MutationToMarkDeathAsValidatedResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToMarkDeathAsValidatedArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToMarkDeathAsRegisteredArgs {
  id: string
  details: GQLDeathRegistrationInput
}
export interface MutationToMarkDeathAsRegisteredResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToMarkDeathAsRegisteredArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToMarkDeathAsCertifiedArgs {
  id: string
  details: GQLDeathRegistrationInput
}
export interface MutationToMarkDeathAsCertifiedResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToMarkDeathAsCertifiedArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToMarkDeathAsIssuedArgs {
  id: string
  details: GQLDeathRegistrationInput
}
export interface MutationToMarkDeathAsIssuedResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToMarkDeathAsIssuedArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToMarkEventAsUnassignedArgs {
  id: string
}
export interface MutationToMarkEventAsUnassignedResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToMarkEventAsUnassignedArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToCreateMarriageRegistrationArgs {
  details: GQLMarriageRegistrationInput
}
export interface MutationToCreateMarriageRegistrationResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateMarriageRegistrationArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToMarkMarriageAsValidatedArgs {
  id: string
  details?: GQLMarriageRegistrationInput
}
export interface MutationToMarkMarriageAsValidatedResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToMarkMarriageAsValidatedArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToMarkMarriageAsRegisteredArgs {
  id: string
  details: GQLMarriageRegistrationInput
}
export interface MutationToMarkMarriageAsRegisteredResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToMarkMarriageAsRegisteredArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToMarkMarriageAsCertifiedArgs {
  id: string
  details: GQLMarriageRegistrationInput
}
export interface MutationToMarkMarriageAsCertifiedResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToMarkMarriageAsCertifiedArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToMarkMarriageAsIssuedArgs {
  id: string
  details: GQLMarriageRegistrationInput
}
export interface MutationToMarkMarriageAsIssuedResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToMarkMarriageAsIssuedArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToMarkEventAsDuplicateArgs {
  id: string
  reason: string
  comment?: string
  duplicateTrackingId?: string
}
export interface MutationToMarkEventAsDuplicateResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToMarkEventAsDuplicateArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToConfirmRegistrationArgs {
  id: string
  details: GQLConfirmRegistrationInput
}
export interface MutationToConfirmRegistrationResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToConfirmRegistrationArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToRejectRegistrationArgs {
  id: string
  details: GQLRejectRegistrationInput
}
export interface MutationToRejectRegistrationResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToRejectRegistrationArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToUpsertRegistrationIdentifierArgs {
  id: string
  identifierType: string
  identifierValue: string
}
export interface MutationToUpsertRegistrationIdentifierResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpsertRegistrationIdentifierArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToCreateOrUpdateUserArgs {
  user: GQLUserInput
}
export interface MutationToCreateOrUpdateUserResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateOrUpdateUserArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToActivateUserArgs {
  userId: string
  password: string
  securityQNAs: Array<GQLSecurityQuestionAnswer | null>
}
export interface MutationToActivateUserResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToActivateUserArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToChangePasswordArgs {
  userId: string
  existingPassword: string
  password: string
}
export interface MutationToChangePasswordResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToChangePasswordArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToChangePhoneArgs {
  userId: string
  phoneNumber: string
  nonce: string
  verifyCode: string
}
export interface MutationToChangePhoneResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToChangePhoneArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToChangeEmailArgs {
  userId: string
  email: string
  nonce: string
  verifyCode: string
}
export interface MutationToChangeEmailResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToChangeEmailArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToChangeAvatarArgs {
  userId: string
  avatar: GQLAvatarInput
}
export interface MutationToChangeAvatarResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToChangeAvatarArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToAuditUserArgs {
  userId: string
  action: string
  reason: string
  comment?: string
}
export interface MutationToAuditUserResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToAuditUserArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToResendInviteArgs {
  userId: string
}
export interface MutationToResendInviteResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToResendInviteArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToUsernameReminderArgs {
  userId: string
}
export interface MutationToUsernameReminderResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUsernameReminderArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToResetPasswordInviteArgs {
  userId: string
}
export interface MutationToResetPasswordInviteResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToResetPasswordInviteArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToReactivateSystemArgs {
  clientId: string
}
export interface MutationToReactivateSystemResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToReactivateSystemArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToDeactivateSystemArgs {
  clientId: string
}
export interface MutationToDeactivateSystemResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToDeactivateSystemArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToRegisterSystemArgs {
  system?: GQLSystemInput
}
export interface MutationToRegisterSystemResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToRegisterSystemArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToRefreshSystemSecretArgs {
  clientId: string
}
export interface MutationToRefreshSystemSecretResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToRefreshSystemSecretArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToUpdatePermissionsArgs {
  setting: GQLUpdatePermissionsInput
}
export interface MutationToUpdatePermissionsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdatePermissionsArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToDeleteSystemArgs {
  clientId: string
}
export interface MutationToDeleteSystemResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToDeleteSystemArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToBookmarkAdvancedSearchArgs {
  bookmarkSearchInput: GQLBookmarkSearchInput
}
export interface MutationToBookmarkAdvancedSearchResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToBookmarkAdvancedSearchArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToRemoveBookmarkedAdvancedSearchArgs {
  removeBookmarkedSearchInput: GQLRemoveBookmarkedSeachInput
}
export interface MutationToRemoveBookmarkedAdvancedSearchResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToRemoveBookmarkedAdvancedSearchArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLDummyTypeResolver<TParent = any> {
  dummy?: DummyToDummyResolver<TParent>
}

export interface DummyToDummyResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLNotificationResultTypeResolver<TParent = any> {
  success?: NotificationResultToSuccessResolver<TParent>
}

export interface NotificationResultToSuccessResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLBirthRegistrationTypeResolver<TParent = any> {
  id?: BirthRegistrationToIdResolver<TParent>
  _fhirIDMap?: BirthRegistrationTo_fhirIDMapResolver<TParent>
  registration?: BirthRegistrationToRegistrationResolver<TParent>
  child?: BirthRegistrationToChildResolver<TParent>
  mother?: BirthRegistrationToMotherResolver<TParent>
  father?: BirthRegistrationToFatherResolver<TParent>
  informant?: BirthRegistrationToInformantResolver<TParent>
  eventLocation?: BirthRegistrationToEventLocationResolver<TParent>
  birthType?: BirthRegistrationToBirthTypeResolver<TParent>
  questionnaire?: BirthRegistrationToQuestionnaireResolver<TParent>
  weightAtBirth?: BirthRegistrationToWeightAtBirthResolver<TParent>
  attendantAtBirth?: BirthRegistrationToAttendantAtBirthResolver<TParent>
  otherAttendantAtBirth?: BirthRegistrationToOtherAttendantAtBirthResolver<TParent>
  childrenBornAliveToMother?: BirthRegistrationToChildrenBornAliveToMotherResolver<TParent>
  foetalDeathsToMother?: BirthRegistrationToFoetalDeathsToMotherResolver<TParent>
  lastPreviousLiveBirth?: BirthRegistrationToLastPreviousLiveBirthResolver<TParent>
  createdAt?: BirthRegistrationToCreatedAtResolver<TParent>
  updatedAt?: BirthRegistrationToUpdatedAtResolver<TParent>
  history?: BirthRegistrationToHistoryResolver<TParent>
}

export interface BirthRegistrationToIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface BirthRegistrationTo_fhirIDMapResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface BirthRegistrationToRegistrationResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface BirthRegistrationToChildResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface BirthRegistrationToMotherResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface BirthRegistrationToFatherResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface BirthRegistrationToInformantResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface BirthRegistrationToEventLocationResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface BirthRegistrationToBirthTypeResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface BirthRegistrationToQuestionnaireResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface BirthRegistrationToWeightAtBirthResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface BirthRegistrationToAttendantAtBirthResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface BirthRegistrationToOtherAttendantAtBirthResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface BirthRegistrationToChildrenBornAliveToMotherResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface BirthRegistrationToFoetalDeathsToMotherResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface BirthRegistrationToLastPreviousLiveBirthResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface BirthRegistrationToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface BirthRegistrationToUpdatedAtResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface BirthRegistrationToHistoryResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLPersonTypeResolver<TParent = any> {
  id?: PersonToIdResolver<TParent>
  _fhirID?: PersonTo_fhirIDResolver<TParent>
  identifier?: PersonToIdentifierResolver<TParent>
  name?: PersonToNameResolver<TParent>
  telecom?: PersonToTelecomResolver<TParent>
  gender?: PersonToGenderResolver<TParent>
  birthDate?: PersonToBirthDateResolver<TParent>
  age?: PersonToAgeResolver<TParent>
  maritalStatus?: PersonToMaritalStatusResolver<TParent>
  occupation?: PersonToOccupationResolver<TParent>
  detailsExist?: PersonToDetailsExistResolver<TParent>
  reasonNotApplying?: PersonToReasonNotApplyingResolver<TParent>
  dateOfMarriage?: PersonToDateOfMarriageResolver<TParent>
  multipleBirth?: PersonToMultipleBirthResolver<TParent>
  address?: PersonToAddressResolver<TParent>
  photo?: PersonToPhotoResolver<TParent>
  deceased?: PersonToDeceasedResolver<TParent>
  nationality?: PersonToNationalityResolver<TParent>
  educationalAttainment?: PersonToEducationalAttainmentResolver<TParent>
  ageOfIndividualInYears?: PersonToAgeOfIndividualInYearsResolver<TParent>
  exactDateOfBirthUnknown?: PersonToExactDateOfBirthUnknownResolver<TParent>
}

export interface PersonToIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface PersonTo_fhirIDResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface PersonToIdentifierResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface PersonToNameResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface PersonToTelecomResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface PersonToGenderResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface PersonToBirthDateResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface PersonToAgeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface PersonToMaritalStatusResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface PersonToOccupationResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface PersonToDetailsExistResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface PersonToReasonNotApplyingResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface PersonToDateOfMarriageResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface PersonToMultipleBirthResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface PersonToAddressResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface PersonToPhotoResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface PersonToDeceasedResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface PersonToNationalityResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface PersonToEducationalAttainmentResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface PersonToAgeOfIndividualInYearsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface PersonToExactDateOfBirthUnknownResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLBirthRegResultSetTypeResolver<TParent = any> {
  results?: BirthRegResultSetToResultsResolver<TParent>
  totalItems?: BirthRegResultSetToTotalItemsResolver<TParent>
}

export interface BirthRegResultSetToResultsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface BirthRegResultSetToTotalItemsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLDeathRegistrationTypeResolver<TParent = any> {
  id?: DeathRegistrationToIdResolver<TParent>
  _fhirIDMap?: DeathRegistrationTo_fhirIDMapResolver<TParent>
  registration?: DeathRegistrationToRegistrationResolver<TParent>
  deceased?: DeathRegistrationToDeceasedResolver<TParent>
  informant?: DeathRegistrationToInformantResolver<TParent>
  mother?: DeathRegistrationToMotherResolver<TParent>
  father?: DeathRegistrationToFatherResolver<TParent>
  spouse?: DeathRegistrationToSpouseResolver<TParent>
  eventLocation?: DeathRegistrationToEventLocationResolver<TParent>
  questionnaire?: DeathRegistrationToQuestionnaireResolver<TParent>
  mannerOfDeath?: DeathRegistrationToMannerOfDeathResolver<TParent>
  deathDescription?: DeathRegistrationToDeathDescriptionResolver<TParent>
  causeOfDeathMethod?: DeathRegistrationToCauseOfDeathMethodResolver<TParent>
  causeOfDeathEstablished?: DeathRegistrationToCauseOfDeathEstablishedResolver<TParent>
  causeOfDeath?: DeathRegistrationToCauseOfDeathResolver<TParent>
  maleDependentsOfDeceased?: DeathRegistrationToMaleDependentsOfDeceasedResolver<TParent>
  femaleDependentsOfDeceased?: DeathRegistrationToFemaleDependentsOfDeceasedResolver<TParent>
  medicalPractitioner?: DeathRegistrationToMedicalPractitionerResolver<TParent>
  createdAt?: DeathRegistrationToCreatedAtResolver<TParent>
  updatedAt?: DeathRegistrationToUpdatedAtResolver<TParent>
  history?: DeathRegistrationToHistoryResolver<TParent>
}

export interface DeathRegistrationToIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DeathRegistrationTo_fhirIDMapResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DeathRegistrationToRegistrationResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DeathRegistrationToDeceasedResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DeathRegistrationToInformantResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DeathRegistrationToMotherResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DeathRegistrationToFatherResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DeathRegistrationToSpouseResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DeathRegistrationToEventLocationResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DeathRegistrationToQuestionnaireResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DeathRegistrationToMannerOfDeathResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DeathRegistrationToDeathDescriptionResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DeathRegistrationToCauseOfDeathMethodResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DeathRegistrationToCauseOfDeathEstablishedResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DeathRegistrationToCauseOfDeathResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DeathRegistrationToMaleDependentsOfDeceasedResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DeathRegistrationToFemaleDependentsOfDeceasedResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DeathRegistrationToMedicalPractitionerResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DeathRegistrationToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DeathRegistrationToUpdatedAtResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DeathRegistrationToHistoryResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLEventRegistrationTypeResolver<TParent = any> {
  (parent: TParent, context: Context, info: GraphQLResolveInfo):
    | 'BirthRegistration'
    | 'DeathRegistration'
    | 'MarriageRegistration'
    | Promise<
        'BirthRegistration' | 'DeathRegistration' | 'MarriageRegistration'
      >
}
export interface GQLRegistrationCountResultTypeResolver<TParent = any> {
  results?: RegistrationCountResultToResultsResolver<TParent>
  total?: RegistrationCountResultToTotalResolver<TParent>
}

export interface RegistrationCountResultToResultsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RegistrationCountResultToTotalResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLMarriageRegistrationTypeResolver<TParent = any> {
  id?: MarriageRegistrationToIdResolver<TParent>
  _fhirIDMap?: MarriageRegistrationTo_fhirIDMapResolver<TParent>
  registration?: MarriageRegistrationToRegistrationResolver<TParent>
  informant?: MarriageRegistrationToInformantResolver<TParent>
  bride?: MarriageRegistrationToBrideResolver<TParent>
  groom?: MarriageRegistrationToGroomResolver<TParent>
  witnessOne?: MarriageRegistrationToWitnessOneResolver<TParent>
  witnessTwo?: MarriageRegistrationToWitnessTwoResolver<TParent>
  eventLocation?: MarriageRegistrationToEventLocationResolver<TParent>
  typeOfMarriage?: MarriageRegistrationToTypeOfMarriageResolver<TParent>
  questionnaire?: MarriageRegistrationToQuestionnaireResolver<TParent>
  createdAt?: MarriageRegistrationToCreatedAtResolver<TParent>
  updatedAt?: MarriageRegistrationToUpdatedAtResolver<TParent>
  history?: MarriageRegistrationToHistoryResolver<TParent>
}

export interface MarriageRegistrationToIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MarriageRegistrationTo_fhirIDMapResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MarriageRegistrationToRegistrationResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MarriageRegistrationToInformantResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MarriageRegistrationToBrideResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MarriageRegistrationToGroomResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MarriageRegistrationToWitnessOneResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MarriageRegistrationToWitnessTwoResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MarriageRegistrationToEventLocationResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MarriageRegistrationToTypeOfMarriageResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MarriageRegistrationToQuestionnaireResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MarriageRegistrationToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MarriageRegistrationToUpdatedAtResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MarriageRegistrationToHistoryResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLRecordDetailsTypeResolver<TParent = any> {
  (parent: TParent, context: Context, info: GraphQLResolveInfo):
    | 'BirthRegistration'
    | 'DeathRegistration'
    | Promise<'BirthRegistration' | 'DeathRegistration'>
}
export interface GQLUserTypeResolver<TParent = any> {
  id?: UserToIdResolver<TParent>
  userMgntUserID?: UserToUserMgntUserIDResolver<TParent>
  practitionerId?: UserToPractitionerIdResolver<TParent>
  name?: UserToNameResolver<TParent>
  username?: UserToUsernameResolver<TParent>
  mobile?: UserToMobileResolver<TParent>
  role?: UserToRoleResolver<TParent>
  email?: UserToEmailResolver<TParent>
  status?: UserToStatusResolver<TParent>
  underInvestigation?: UserToUnderInvestigationResolver<TParent>
  primaryOffice?: UserToPrimaryOfficeResolver<TParent>
  localRegistrar?: UserToLocalRegistrarResolver<TParent>
  identifier?: UserToIdentifierResolver<TParent>
  signature?: UserToSignatureResolver<TParent>
  creationDate?: UserToCreationDateResolver<TParent>
  avatar?: UserToAvatarResolver<TParent>
  device?: UserToDeviceResolver<TParent>
  searches?: UserToSearchesResolver<TParent>
}

export interface UserToIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToUserMgntUserIDResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToPractitionerIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToNameResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToUsernameResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToMobileResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToRoleResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToEmailResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToStatusResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToUnderInvestigationResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToPrimaryOfficeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToLocalRegistrarResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToIdentifierResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToSignatureResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToCreationDateResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToAvatarResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToDeviceResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToSearchesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLSearchUserResultTypeResolver<TParent = any> {
  results?: SearchUserResultToResultsResolver<TParent>
  totalItems?: SearchUserResultToTotalItemsResolver<TParent>
}

export interface SearchUserResultToResultsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface SearchUserResultToTotalItemsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLSearchFieldAgentResultTypeResolver<TParent = any> {
  results?: SearchFieldAgentResultToResultsResolver<TParent>
  totalItems?: SearchFieldAgentResultToTotalItemsResolver<TParent>
}

export interface SearchFieldAgentResultToResultsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface SearchFieldAgentResultToTotalItemsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLVerifyPasswordResultTypeResolver<TParent = any> {
  mobile?: VerifyPasswordResultToMobileResolver<TParent>
  scrope?: VerifyPasswordResultToScropeResolver<TParent>
  status?: VerifyPasswordResultToStatusResolver<TParent>
  username?: VerifyPasswordResultToUsernameResolver<TParent>
  id?: VerifyPasswordResultToIdResolver<TParent>
}

export interface VerifyPasswordResultToMobileResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface VerifyPasswordResultToScropeResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface VerifyPasswordResultToStatusResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface VerifyPasswordResultToUsernameResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface VerifyPasswordResultToIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLTotalMetricsResultTypeResolver<TParent = any> {
  estimated?: TotalMetricsResultToEstimatedResolver<TParent>
  results?: TotalMetricsResultToResultsResolver<TParent>
}

export interface TotalMetricsResultToEstimatedResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TotalMetricsResultToResultsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLMixedTotalMetricsResultTypeResolver<TParent = any> {
  (parent: TParent, context: Context, info: GraphQLResolveInfo):
    | 'TotalMetricsByRegistrar'
    | 'TotalMetricsByLocation'
    | 'TotalMetricsByTime'
    | Promise<
        | 'TotalMetricsByRegistrar'
        | 'TotalMetricsByLocation'
        | 'TotalMetricsByTime'
      >
}
export interface GQLTotalVSExportTypeResolver<TParent = any> {
  results?: TotalVSExportToResultsResolver<TParent>
}

export interface TotalVSExportToResultsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLPaymentMetricTypeResolver<TParent = any> {
  total?: PaymentMetricToTotalResolver<TParent>
  paymentType?: PaymentMetricToPaymentTypeResolver<TParent>
}

export interface PaymentMetricToTotalResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface PaymentMetricToPaymentTypeResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLCertificationMetricTypeResolver<TParent = any> {
  total?: CertificationMetricToTotalResolver<TParent>
  eventType?: CertificationMetricToEventTypeResolver<TParent>
}

export interface CertificationMetricToTotalResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CertificationMetricToEventTypeResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLCorrectionMetricTypeResolver<TParent = any> {
  total?: CorrectionMetricToTotalResolver<TParent>
  reason?: CorrectionMetricToReasonResolver<TParent>
}

export interface CorrectionMetricToTotalResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CorrectionMetricToReasonResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLLocationStatisticsResponseTypeResolver<TParent = any> {
  population?: LocationStatisticsResponseToPopulationResolver<TParent>
  registrars?: LocationStatisticsResponseToRegistrarsResolver<TParent>
  offices?: LocationStatisticsResponseToOfficesResolver<TParent>
}

export interface LocationStatisticsResponseToPopulationResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface LocationStatisticsResponseToRegistrarsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface LocationStatisticsResponseToOfficesResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLDeclarationsStartedMetricsTypeResolver<TParent = any> {
  fieldAgentDeclarations?: DeclarationsStartedMetricsToFieldAgentDeclarationsResolver<TParent>
  hospitalDeclarations?: DeclarationsStartedMetricsToHospitalDeclarationsResolver<TParent>
  officeDeclarations?: DeclarationsStartedMetricsToOfficeDeclarationsResolver<TParent>
}

export interface DeclarationsStartedMetricsToFieldAgentDeclarationsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DeclarationsStartedMetricsToHospitalDeclarationsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DeclarationsStartedMetricsToOfficeDeclarationsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLMonthWiseEstimationMetricTypeResolver<TParent = any> {
  total?: MonthWiseEstimationMetricToTotalResolver<TParent>
  withinTarget?: MonthWiseEstimationMetricToWithinTargetResolver<TParent>
  within1Year?: MonthWiseEstimationMetricToWithin1YearResolver<TParent>
  within5Years?: MonthWiseEstimationMetricToWithin5YearsResolver<TParent>
  estimated?: MonthWiseEstimationMetricToEstimatedResolver<TParent>
  month?: MonthWiseEstimationMetricToMonthResolver<TParent>
  year?: MonthWiseEstimationMetricToYearResolver<TParent>
}

export interface MonthWiseEstimationMetricToTotalResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MonthWiseEstimationMetricToWithinTargetResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MonthWiseEstimationMetricToWithin1YearResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MonthWiseEstimationMetricToWithin5YearsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MonthWiseEstimationMetricToEstimatedResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MonthWiseEstimationMetricToMonthResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MonthWiseEstimationMetricToYearResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLLocationWiseEstimationMetricTypeResolver<TParent = any> {
  total?: LocationWiseEstimationMetricToTotalResolver<TParent>
  withinTarget?: LocationWiseEstimationMetricToWithinTargetResolver<TParent>
  within1Year?: LocationWiseEstimationMetricToWithin1YearResolver<TParent>
  within5Years?: LocationWiseEstimationMetricToWithin5YearsResolver<TParent>
  estimated?: LocationWiseEstimationMetricToEstimatedResolver<TParent>
  locationId?: LocationWiseEstimationMetricToLocationIdResolver<TParent>
  locationName?: LocationWiseEstimationMetricToLocationNameResolver<TParent>
}

export interface LocationWiseEstimationMetricToTotalResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface LocationWiseEstimationMetricToWithinTargetResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface LocationWiseEstimationMetricToWithin1YearResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface LocationWiseEstimationMetricToWithin5YearsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface LocationWiseEstimationMetricToEstimatedResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface LocationWiseEstimationMetricToLocationIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface LocationWiseEstimationMetricToLocationNameResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLUserAuditLogResultSetTypeResolver<TParent = any> {
  total?: UserAuditLogResultSetToTotalResolver<TParent>
  results?: UserAuditLogResultSetToResultsResolver<TParent>
}

export interface UserAuditLogResultSetToTotalResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserAuditLogResultSetToResultsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLEventSearchResultSetTypeResolver<TParent = any> {
  results?: EventSearchResultSetToResultsResolver<TParent>
  totalItems?: EventSearchResultSetToTotalItemsResolver<TParent>
}

export interface EventSearchResultSetToResultsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface EventSearchResultSetToTotalItemsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLEventProgressResultSetTypeResolver<TParent = any> {
  results?: EventProgressResultSetToResultsResolver<TParent>
  totalItems?: EventProgressResultSetToTotalItemsResolver<TParent>
}

export interface EventProgressResultSetToResultsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface EventProgressResultSetToTotalItemsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLUserRoleTypeResolver<TParent = any> {
  id?: UserRoleToIdResolver<TParent>
  label?: UserRoleToLabelResolver<TParent>
  scopes?: UserRoleToScopesResolver<TParent>
}

export interface UserRoleToIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserRoleToLabelResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserRoleToScopesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLSystemTypeResolver<TParent = any> {
  _id?: SystemTo_idResolver<TParent>
  clientId?: SystemToClientIdResolver<TParent>
  shaSecret?: SystemToShaSecretResolver<TParent>
  status?: SystemToStatusResolver<TParent>
  name?: SystemToNameResolver<TParent>
  type?: SystemToTypeResolver<TParent>
  integratingSystemType?: SystemToIntegratingSystemTypeResolver<TParent>
  settings?: SystemToSettingsResolver<TParent>
}

export interface SystemTo_idResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface SystemToClientIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface SystemToShaSecretResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface SystemToStatusResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface SystemToNameResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface SystemToTypeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface SystemToIntegratingSystemTypeResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface SystemToSettingsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLCreatedIdsTypeResolver<TParent = any> {
  compositionId?: CreatedIdsToCompositionIdResolver<TParent>
  trackingId?: CreatedIdsToTrackingIdResolver<TParent>
  isPotentiallyDuplicate?: CreatedIdsToIsPotentiallyDuplicateResolver<TParent>
}

export interface CreatedIdsToCompositionIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CreatedIdsToTrackingIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CreatedIdsToIsPotentiallyDuplicateResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLReinstatedTypeResolver<TParent = any> {
  taskEntryResourceID?: ReinstatedToTaskEntryResourceIDResolver<TParent>
  registrationStatus?: ReinstatedToRegistrationStatusResolver<TParent>
}

export interface ReinstatedToTaskEntryResourceIDResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ReinstatedToRegistrationStatusResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLAvatarTypeResolver<TParent = any> {
  type?: AvatarToTypeResolver<TParent>
  data?: AvatarToDataResolver<TParent>
}

export interface AvatarToTypeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AvatarToDataResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLSystemSecretTypeResolver<TParent = any> {
  system?: SystemSecretToSystemResolver<TParent>
  clientSecret?: SystemSecretToClientSecretResolver<TParent>
}

export interface SystemSecretToSystemResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface SystemSecretToClientSecretResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLBookMarkedSearchesTypeResolver<TParent = any> {
  searchList?: BookMarkedSearchesToSearchListResolver<TParent>
}

export interface BookMarkedSearchesToSearchListResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLRegistrationTypeResolver<TParent = any> {
  id?: RegistrationToIdResolver<TParent>
  _fhirID?: RegistrationTo_fhirIDResolver<TParent>
  draftId?: RegistrationToDraftIdResolver<TParent>
  trackingId?: RegistrationToTrackingIdResolver<TParent>
  registrationNumber?: RegistrationToRegistrationNumberResolver<TParent>
  paperFormID?: RegistrationToPaperFormIDResolver<TParent>
  page?: RegistrationToPageResolver<TParent>
  book?: RegistrationToBookResolver<TParent>
  informantType?: RegistrationToInformantTypeResolver<TParent>
  otherInformantType?: RegistrationToOtherInformantTypeResolver<TParent>
  assignment?: RegistrationToAssignmentResolver<TParent>
  contact?: RegistrationToContactResolver<TParent>
  contactRelationship?: RegistrationToContactRelationshipResolver<TParent>
  informantsSignature?: RegistrationToInformantsSignatureResolver<TParent>
  groomSignature?: RegistrationToGroomSignatureResolver<TParent>
  brideSignature?: RegistrationToBrideSignatureResolver<TParent>
  witnessOneSignature?: RegistrationToWitnessOneSignatureResolver<TParent>
  witnessTwoSignature?: RegistrationToWitnessTwoSignatureResolver<TParent>
  contactPhoneNumber?: RegistrationToContactPhoneNumberResolver<TParent>
  contactEmail?: RegistrationToContactEmailResolver<TParent>
  status?: RegistrationToStatusResolver<TParent>
  type?: RegistrationToTypeResolver<TParent>
  inCompleteFields?: RegistrationToInCompleteFieldsResolver<TParent>
  attachments?: RegistrationToAttachmentsResolver<TParent>
  certificates?: RegistrationToCertificatesResolver<TParent>
  duplicates?: RegistrationToDuplicatesResolver<TParent>
}

export interface RegistrationToIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RegistrationTo_fhirIDResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RegistrationToDraftIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RegistrationToTrackingIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RegistrationToRegistrationNumberResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RegistrationToPaperFormIDResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RegistrationToPageResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RegistrationToBookResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RegistrationToInformantTypeResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RegistrationToOtherInformantTypeResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RegistrationToAssignmentResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RegistrationToContactResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RegistrationToContactRelationshipResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RegistrationToInformantsSignatureResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RegistrationToGroomSignatureResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RegistrationToBrideSignatureResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RegistrationToWitnessOneSignatureResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RegistrationToWitnessTwoSignatureResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RegistrationToContactPhoneNumberResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RegistrationToContactEmailResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RegistrationToStatusResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RegistrationToTypeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RegistrationToInCompleteFieldsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RegistrationToAttachmentsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RegistrationToCertificatesResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RegistrationToDuplicatesResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLRelatedPersonTypeResolver<TParent = any> {
  id?: RelatedPersonToIdResolver<TParent>
  _fhirID?: RelatedPersonTo_fhirIDResolver<TParent>
  _fhirIDPatient?: RelatedPersonTo_fhirIDPatientResolver<TParent>
  relationship?: RelatedPersonToRelationshipResolver<TParent>
  otherRelationship?: RelatedPersonToOtherRelationshipResolver<TParent>
  affidavit?: RelatedPersonToAffidavitResolver<TParent>
  identifier?: RelatedPersonToIdentifierResolver<TParent>
  name?: RelatedPersonToNameResolver<TParent>
  telecom?: RelatedPersonToTelecomResolver<TParent>
  gender?: RelatedPersonToGenderResolver<TParent>
  birthDate?: RelatedPersonToBirthDateResolver<TParent>
  age?: RelatedPersonToAgeResolver<TParent>
  maritalStatus?: RelatedPersonToMaritalStatusResolver<TParent>
  occupation?: RelatedPersonToOccupationResolver<TParent>
  detailsExist?: RelatedPersonToDetailsExistResolver<TParent>
  reasonNotApplying?: RelatedPersonToReasonNotApplyingResolver<TParent>
  dateOfMarriage?: RelatedPersonToDateOfMarriageResolver<TParent>
  multipleBirth?: RelatedPersonToMultipleBirthResolver<TParent>
  address?: RelatedPersonToAddressResolver<TParent>
  photo?: RelatedPersonToPhotoResolver<TParent>
  deceased?: RelatedPersonToDeceasedResolver<TParent>
  nationality?: RelatedPersonToNationalityResolver<TParent>
  educationalAttainment?: RelatedPersonToEducationalAttainmentResolver<TParent>
  ageOfIndividualInYears?: RelatedPersonToAgeOfIndividualInYearsResolver<TParent>
  exactDateOfBirthUnknown?: RelatedPersonToExactDateOfBirthUnknownResolver<TParent>
}

export interface RelatedPersonToIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RelatedPersonTo_fhirIDResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RelatedPersonTo_fhirIDPatientResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RelatedPersonToRelationshipResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RelatedPersonToOtherRelationshipResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RelatedPersonToAffidavitResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RelatedPersonToIdentifierResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RelatedPersonToNameResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RelatedPersonToTelecomResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RelatedPersonToGenderResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RelatedPersonToBirthDateResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RelatedPersonToAgeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RelatedPersonToMaritalStatusResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RelatedPersonToOccupationResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RelatedPersonToDetailsExistResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RelatedPersonToReasonNotApplyingResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RelatedPersonToDateOfMarriageResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RelatedPersonToMultipleBirthResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RelatedPersonToAddressResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RelatedPersonToPhotoResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RelatedPersonToDeceasedResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RelatedPersonToNationalityResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RelatedPersonToEducationalAttainmentResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RelatedPersonToAgeOfIndividualInYearsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RelatedPersonToExactDateOfBirthUnknownResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLLocationTypeResolver<TParent = any> {
  id?: LocationToIdResolver<TParent>
  _fhirID?: LocationTo_fhirIDResolver<TParent>
  identifier?: LocationToIdentifierResolver<TParent>
  status?: LocationToStatusResolver<TParent>
  name?: LocationToNameResolver<TParent>
  alias?: LocationToAliasResolver<TParent>
  description?: LocationToDescriptionResolver<TParent>
  partOf?: LocationToPartOfResolver<TParent>
  type?: LocationToTypeResolver<TParent>
  telecom?: LocationToTelecomResolver<TParent>
  address?: LocationToAddressResolver<TParent>
  longitude?: LocationToLongitudeResolver<TParent>
  latitude?: LocationToLatitudeResolver<TParent>
  altitude?: LocationToAltitudeResolver<TParent>
  geoData?: LocationToGeoDataResolver<TParent>
  hierarchy?: LocationToHierarchyResolver<TParent>
}

export interface LocationToIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface LocationTo_fhirIDResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface LocationToIdentifierResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface LocationToStatusResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface LocationToNameResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface LocationToAliasResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface LocationToDescriptionResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface LocationToPartOfResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface LocationToTypeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface LocationToTelecomResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface LocationToAddressResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface LocationToLongitudeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface LocationToLatitudeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface LocationToAltitudeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface LocationToGeoDataResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface LocationToHierarchyResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLQuestionnaireQuestionTypeResolver<TParent = any> {
  fieldId?: QuestionnaireQuestionToFieldIdResolver<TParent>
  value?: QuestionnaireQuestionToValueResolver<TParent>
}

export interface QuestionnaireQuestionToFieldIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QuestionnaireQuestionToValueResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLHistoryTypeResolver<TParent = any> {
  user?: HistoryToUserResolver<TParent>
  date?: HistoryToDateResolver<TParent>
  regStatus?: HistoryToRegStatusResolver<TParent>
  ipAddress?: HistoryToIpAddressResolver<TParent>
  action?: HistoryToActionResolver<TParent>
  note?: HistoryToNoteResolver<TParent>
  statusReason?: HistoryToStatusReasonResolver<TParent>
  reason?: HistoryToReasonResolver<TParent>
  requester?: HistoryToRequesterResolver<TParent>
  requesterOther?: HistoryToRequesterOtherResolver<TParent>
  hasShowedVerifiedDocument?: HistoryToHasShowedVerifiedDocumentResolver<TParent>
  certificateTemplateId?: HistoryToCertificateTemplateIdResolver<TParent>
  noSupportingDocumentationRequired?: HistoryToNoSupportingDocumentationRequiredResolver<TParent>
  otherReason?: HistoryToOtherReasonResolver<TParent>
  system?: HistoryToSystemResolver<TParent>
  location?: HistoryToLocationResolver<TParent>
  office?: HistoryToOfficeResolver<TParent>
  dhis2Notification?: HistoryToDhis2NotificationResolver<TParent>
  comments?: HistoryToCommentsResolver<TParent>
  input?: HistoryToInputResolver<TParent>
  output?: HistoryToOutputResolver<TParent>
  certificates?: HistoryToCertificatesResolver<TParent>
  signature?: HistoryToSignatureResolver<TParent>
  payment?: HistoryToPaymentResolver<TParent>
  documents?: HistoryToDocumentsResolver<TParent>
  duplicateOf?: HistoryToDuplicateOfResolver<TParent>
  potentialDuplicates?: HistoryToPotentialDuplicatesResolver<TParent>
}

export interface HistoryToUserResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface HistoryToDateResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface HistoryToRegStatusResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface HistoryToIpAddressResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface HistoryToActionResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface HistoryToNoteResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface HistoryToStatusReasonResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface HistoryToReasonResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface HistoryToRequesterResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface HistoryToRequesterOtherResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface HistoryToHasShowedVerifiedDocumentResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface HistoryToCertificateTemplateIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface HistoryToNoSupportingDocumentationRequiredResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface HistoryToOtherReasonResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface HistoryToSystemResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface HistoryToLocationResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface HistoryToOfficeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface HistoryToDhis2NotificationResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface HistoryToCommentsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface HistoryToInputResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface HistoryToOutputResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface HistoryToCertificatesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface HistoryToSignatureResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface HistoryToPaymentResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface HistoryToDocumentsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface HistoryToDuplicateOfResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface HistoryToPotentialDuplicatesResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLIdentityTypeTypeResolver<TParent = any> {
  id?: IdentityTypeToIdResolver<TParent>
  type?: IdentityTypeToTypeResolver<TParent>
  otherType?: IdentityTypeToOtherTypeResolver<TParent>
  fieldsModifiedByIdentity?: IdentityTypeToFieldsModifiedByIdentityResolver<TParent>
}

export interface IdentityTypeToIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface IdentityTypeToTypeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface IdentityTypeToOtherTypeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface IdentityTypeToFieldsModifiedByIdentityResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLHumanNameTypeResolver<TParent = any> {
  use?: HumanNameToUseResolver<TParent>
  firstNames?: HumanNameToFirstNamesResolver<TParent>
  middleName?: HumanNameToMiddleNameResolver<TParent>
  familyName?: HumanNameToFamilyNameResolver<TParent>
  marriedLastName?: HumanNameToMarriedLastNameResolver<TParent>
}

export interface HumanNameToUseResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface HumanNameToFirstNamesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface HumanNameToMiddleNameResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface HumanNameToFamilyNameResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface HumanNameToMarriedLastNameResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLContactPointTypeResolver<TParent = any> {
  system?: ContactPointToSystemResolver<TParent>
  value?: ContactPointToValueResolver<TParent>
  use?: ContactPointToUseResolver<TParent>
}

export interface ContactPointToSystemResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ContactPointToValueResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ContactPointToUseResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLAddressTypeResolver<TParent = any> {
  use?: AddressToUseResolver<TParent>
  type?: AddressToTypeResolver<TParent>
  text?: AddressToTextResolver<TParent>
  line?: AddressToLineResolver<TParent>
  lineName?: AddressToLineNameResolver<TParent>
  city?: AddressToCityResolver<TParent>
  district?: AddressToDistrictResolver<TParent>
  districtName?: AddressToDistrictNameResolver<TParent>
  state?: AddressToStateResolver<TParent>
  stateName?: AddressToStateNameResolver<TParent>
  postalCode?: AddressToPostalCodeResolver<TParent>
  country?: AddressToCountryResolver<TParent>
  from?: AddressToFromResolver<TParent>
  to?: AddressToToResolver<TParent>
  partOf?: AddressToPartOfResolver<TParent>
}

export interface AddressToUseResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AddressToTypeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AddressToTextResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AddressToLineResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AddressToLineNameResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AddressToCityResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AddressToDistrictResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AddressToDistrictNameResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AddressToStateResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AddressToStateNameResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AddressToPostalCodeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AddressToCountryResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AddressToFromResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AddressToToResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AddressToPartOfResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLAttachmentTypeResolver<TParent = any> {
  id?: AttachmentToIdResolver<TParent>
  _fhirID?: AttachmentTo_fhirIDResolver<TParent>
  contentType?: AttachmentToContentTypeResolver<TParent>
  data?: AttachmentToDataResolver<TParent>
  uri?: AttachmentToUriResolver<TParent>
  status?: AttachmentToStatusResolver<TParent>
  originalFileName?: AttachmentToOriginalFileNameResolver<TParent>
  systemFileName?: AttachmentToSystemFileNameResolver<TParent>
  type?: AttachmentToTypeResolver<TParent>
  description?: AttachmentToDescriptionResolver<TParent>
  subject?: AttachmentToSubjectResolver<TParent>
  createdAt?: AttachmentToCreatedAtResolver<TParent>
}

export interface AttachmentToIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AttachmentTo_fhirIDResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AttachmentToContentTypeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AttachmentToDataResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AttachmentToUriResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AttachmentToStatusResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AttachmentToOriginalFileNameResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AttachmentToSystemFileNameResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AttachmentToTypeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AttachmentToDescriptionResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AttachmentToSubjectResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AttachmentToCreatedAtResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLDeceasedTypeResolver<TParent = any> {
  deceased?: DeceasedToDeceasedResolver<TParent>
  deathDate?: DeceasedToDeathDateResolver<TParent>
}

export interface DeceasedToDeceasedResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DeceasedToDeathDateResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLMedicalPractitionerTypeResolver<TParent = any> {
  name?: MedicalPractitionerToNameResolver<TParent>
  qualification?: MedicalPractitionerToQualificationResolver<TParent>
  lastVisitDate?: MedicalPractitionerToLastVisitDateResolver<TParent>
}

export interface MedicalPractitionerToNameResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MedicalPractitionerToQualificationResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MedicalPractitionerToLastVisitDateResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLStatusWiseRegistrationCountTypeResolver<TParent = any> {
  status?: StatusWiseRegistrationCountToStatusResolver<TParent>
  count?: StatusWiseRegistrationCountToCountResolver<TParent>
}

export interface StatusWiseRegistrationCountToStatusResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface StatusWiseRegistrationCountToCountResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLLocalRegistrarTypeResolver<TParent = any> {
  name?: LocalRegistrarToNameResolver<TParent>
  role?: LocalRegistrarToRoleResolver<TParent>
  signature?: LocalRegistrarToSignatureResolver<TParent>
}

export interface LocalRegistrarToNameResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface LocalRegistrarToRoleResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface LocalRegistrarToSignatureResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLIdentifierTypeResolver<TParent = any> {
  system?: IdentifierToSystemResolver<TParent>
  value?: IdentifierToValueResolver<TParent>
}

export interface IdentifierToSystemResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface IdentifierToValueResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLSignatureTypeResolver<TParent = any> {
  data?: SignatureToDataResolver<TParent>
  type?: SignatureToTypeResolver<TParent>
}

export interface SignatureToDataResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface SignatureToTypeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLBookmarkedSeachItemTypeResolver<TParent = any> {
  searchId?: BookmarkedSeachItemToSearchIdResolver<TParent>
  name?: BookmarkedSeachItemToNameResolver<TParent>
  parameters?: BookmarkedSeachItemToParametersResolver<TParent>
}

export interface BookmarkedSeachItemToSearchIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface BookmarkedSeachItemToNameResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface BookmarkedSeachItemToParametersResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLSearchFieldAgentResponseTypeResolver<TParent = any> {
  practitionerId?: SearchFieldAgentResponseToPractitionerIdResolver<TParent>
  fullName?: SearchFieldAgentResponseToFullNameResolver<TParent>
  role?: SearchFieldAgentResponseToRoleResolver<TParent>
  status?: SearchFieldAgentResponseToStatusResolver<TParent>
  avatar?: SearchFieldAgentResponseToAvatarResolver<TParent>
  primaryOfficeId?: SearchFieldAgentResponseToPrimaryOfficeIdResolver<TParent>
  creationDate?: SearchFieldAgentResponseToCreationDateResolver<TParent>
  totalNumberOfDeclarationStarted?: SearchFieldAgentResponseToTotalNumberOfDeclarationStartedResolver<TParent>
  totalNumberOfInProgressAppStarted?: SearchFieldAgentResponseToTotalNumberOfInProgressAppStartedResolver<TParent>
  totalNumberOfRejectedDeclarations?: SearchFieldAgentResponseToTotalNumberOfRejectedDeclarationsResolver<TParent>
  averageTimeForDeclaredDeclarations?: SearchFieldAgentResponseToAverageTimeForDeclaredDeclarationsResolver<TParent>
}

export interface SearchFieldAgentResponseToPractitionerIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface SearchFieldAgentResponseToFullNameResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface SearchFieldAgentResponseToRoleResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface SearchFieldAgentResponseToStatusResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface SearchFieldAgentResponseToAvatarResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface SearchFieldAgentResponseToPrimaryOfficeIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface SearchFieldAgentResponseToCreationDateResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface SearchFieldAgentResponseToTotalNumberOfDeclarationStartedResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface SearchFieldAgentResponseToTotalNumberOfInProgressAppStartedResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface SearchFieldAgentResponseToTotalNumberOfRejectedDeclarationsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface SearchFieldAgentResponseToAverageTimeForDeclaredDeclarationsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLEstimationTypeResolver<TParent = any> {
  totalEstimation?: EstimationToTotalEstimationResolver<TParent>
  maleEstimation?: EstimationToMaleEstimationResolver<TParent>
  femaleEstimation?: EstimationToFemaleEstimationResolver<TParent>
  locationId?: EstimationToLocationIdResolver<TParent>
  locationLevel?: EstimationToLocationLevelResolver<TParent>
}

export interface EstimationToTotalEstimationResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface EstimationToMaleEstimationResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface EstimationToFemaleEstimationResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface EstimationToLocationIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface EstimationToLocationLevelResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLEventMetricsTypeResolver<TParent = any> {
  total?: EventMetricsToTotalResolver<TParent>
  gender?: EventMetricsToGenderResolver<TParent>
  eventLocationType?: EventMetricsToEventLocationTypeResolver<TParent>
  timeLabel?: EventMetricsToTimeLabelResolver<TParent>
  practitionerRole?: EventMetricsToPractitionerRoleResolver<TParent>
}

export interface EventMetricsToTotalResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface EventMetricsToGenderResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface EventMetricsToEventLocationTypeResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface EventMetricsToTimeLabelResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface EventMetricsToPractitionerRoleResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLTotalMetricsByRegistrarTypeResolver<TParent = any> {
  results?: TotalMetricsByRegistrarToResultsResolver<TParent>
  total?: TotalMetricsByRegistrarToTotalResolver<TParent>
}

export interface TotalMetricsByRegistrarToResultsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TotalMetricsByRegistrarToTotalResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLTotalMetricsByLocationTypeResolver<TParent = any> {
  results?: TotalMetricsByLocationToResultsResolver<TParent>
  total?: TotalMetricsByLocationToTotalResolver<TParent>
}

export interface TotalMetricsByLocationToResultsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TotalMetricsByLocationToTotalResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLTotalMetricsByTimeTypeResolver<TParent = any> {
  results?: TotalMetricsByTimeToResultsResolver<TParent>
  total?: TotalMetricsByTimeToTotalResolver<TParent>
}

export interface TotalMetricsByTimeToResultsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TotalMetricsByTimeToTotalResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLVSExportTypeResolver<TParent = any> {
  event?: VSExportToEventResolver<TParent>
  startDate?: VSExportToStartDateResolver<TParent>
  endDate?: VSExportToEndDateResolver<TParent>
  fileSize?: VSExportToFileSizeResolver<TParent>
  url?: VSExportToUrlResolver<TParent>
  createdOn?: VSExportToCreatedOnResolver<TParent>
}

export interface VSExportToEventResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface VSExportToStartDateResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface VSExportToEndDateResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface VSExportToFileSizeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface VSExportToUrlResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface VSExportToCreatedOnResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLUserAuditLogResultItemTypeResolver<TParent = any> {
  (parent: TParent, context: Context, info: GraphQLResolveInfo):
    | 'UserAuditLogItemWithComposition'
    | 'UserAuditLogItem'
    | Promise<'UserAuditLogItemWithComposition' | 'UserAuditLogItem'>
}
export interface GQLEventSearchSetTypeResolver<TParent = any> {
  (parent: TParent, context: Context, info: GraphQLResolveInfo):
    | 'BirthEventSearchSet'
    | 'DeathEventSearchSet'
    | 'MarriageEventSearchSet'
    | Promise<
        'BirthEventSearchSet' | 'DeathEventSearchSet' | 'MarriageEventSearchSet'
      >
}
export interface GQLEventProgressSetTypeResolver<TParent = any> {
  id?: EventProgressSetToIdResolver<TParent>
  type?: EventProgressSetToTypeResolver<TParent>
  name?: EventProgressSetToNameResolver<TParent>
  dateOfEvent?: EventProgressSetToDateOfEventResolver<TParent>
  registration?: EventProgressSetToRegistrationResolver<TParent>
  startedBy?: EventProgressSetToStartedByResolver<TParent>
  startedByFacility?: EventProgressSetToStartedByFacilityResolver<TParent>
  startedAt?: EventProgressSetToStartedAtResolver<TParent>
  progressReport?: EventProgressSetToProgressReportResolver<TParent>
}

export interface EventProgressSetToIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface EventProgressSetToTypeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface EventProgressSetToNameResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface EventProgressSetToDateOfEventResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface EventProgressSetToRegistrationResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface EventProgressSetToStartedByResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface EventProgressSetToStartedByFacilityResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface EventProgressSetToStartedAtResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface EventProgressSetToProgressReportResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLI18nMessageTypeResolver<TParent = any> {
  id?: I18nMessageToIdResolver<TParent>
  defaultMessage?: I18nMessageToDefaultMessageResolver<TParent>
  description?: I18nMessageToDescriptionResolver<TParent>
}

export interface I18nMessageToIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface I18nMessageToDefaultMessageResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface I18nMessageToDescriptionResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLSystemSettingsTypeResolver<TParent = any> {
  dailyQuota?: SystemSettingsToDailyQuotaResolver<TParent>
  webhook?: SystemSettingsToWebhookResolver<TParent>
  openIdProviderClientId?: SystemSettingsToOpenIdProviderClientIdResolver<TParent>
  openIdProviderBaseUrl?: SystemSettingsToOpenIdProviderBaseUrlResolver<TParent>
  openIdProviderClaims?: SystemSettingsToOpenIdProviderClaimsResolver<TParent>
}

export interface SystemSettingsToDailyQuotaResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface SystemSettingsToWebhookResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface SystemSettingsToOpenIdProviderClientIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface SystemSettingsToOpenIdProviderBaseUrlResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface SystemSettingsToOpenIdProviderClaimsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLAssignmentDataTypeResolver<TParent = any> {
  practitionerId?: AssignmentDataToPractitionerIdResolver<TParent>
  firstName?: AssignmentDataToFirstNameResolver<TParent>
  lastName?: AssignmentDataToLastNameResolver<TParent>
  officeName?: AssignmentDataToOfficeNameResolver<TParent>
  avatarURL?: AssignmentDataToAvatarURLResolver<TParent>
}

export interface AssignmentDataToPractitionerIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AssignmentDataToFirstNameResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AssignmentDataToLastNameResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AssignmentDataToOfficeNameResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AssignmentDataToAvatarURLResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLRegWorkflowTypeResolver<TParent = any> {
  id?: RegWorkflowToIdResolver<TParent>
  type?: RegWorkflowToTypeResolver<TParent>
  user?: RegWorkflowToUserResolver<TParent>
  timestamp?: RegWorkflowToTimestampResolver<TParent>
  comments?: RegWorkflowToCommentsResolver<TParent>
  reason?: RegWorkflowToReasonResolver<TParent>
  location?: RegWorkflowToLocationResolver<TParent>
  office?: RegWorkflowToOfficeResolver<TParent>
  timeLogged?: RegWorkflowToTimeLoggedResolver<TParent>
}

export interface RegWorkflowToIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RegWorkflowToTypeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RegWorkflowToUserResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RegWorkflowToTimestampResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RegWorkflowToCommentsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RegWorkflowToReasonResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RegWorkflowToLocationResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RegWorkflowToOfficeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RegWorkflowToTimeLoggedResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLCertificateTypeResolver<TParent = any> {
  collector?: CertificateToCollectorResolver<TParent>
  certifier?: CertificateToCertifierResolver<TParent>
  hasShowedVerifiedDocument?: CertificateToHasShowedVerifiedDocumentResolver<TParent>
  payments?: CertificateToPaymentsResolver<TParent>
  certificateTemplateId?: CertificateToCertificateTemplateIdResolver<TParent>
}

export interface CertificateToCollectorResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CertificateToCertifierResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CertificateToHasShowedVerifiedDocumentResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CertificateToPaymentsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CertificateToCertificateTemplateIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLDuplicatesInfoTypeResolver<TParent = any> {
  compositionId?: DuplicatesInfoToCompositionIdResolver<TParent>
  trackingId?: DuplicatesInfoToTrackingIdResolver<TParent>
}

export interface DuplicatesInfoToCompositionIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DuplicatesInfoToTrackingIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLStatusReasonTypeResolver<TParent = any> {
  text?: StatusReasonToTextResolver<TParent>
}

export interface StatusReasonToTextResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLIntegratedSystemTypeResolver<TParent = any> {
  name?: IntegratedSystemToNameResolver<TParent>
  username?: IntegratedSystemToUsernameResolver<TParent>
  type?: IntegratedSystemToTypeResolver<TParent>
}

export interface IntegratedSystemToNameResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface IntegratedSystemToUsernameResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface IntegratedSystemToTypeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLCommentTypeResolver<TParent = any> {
  id?: CommentToIdResolver<TParent>
  user?: CommentToUserResolver<TParent>
  comment?: CommentToCommentResolver<TParent>
  createdAt?: CommentToCreatedAtResolver<TParent>
}

export interface CommentToIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CommentToUserResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CommentToCommentResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CommentToCreatedAtResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLInputOutputTypeResolver<TParent = any> {
  valueCode?: InputOutputToValueCodeResolver<TParent>
  valueId?: InputOutputToValueIdResolver<TParent>
  value?: InputOutputToValueResolver<TParent>
}

export interface InputOutputToValueCodeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface InputOutputToValueIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface InputOutputToValueResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLPaymentTypeResolver<TParent = any> {
  id?: PaymentToIdResolver<TParent>
  type?: PaymentToTypeResolver<TParent>
  amount?: PaymentToAmountResolver<TParent>
  outcome?: PaymentToOutcomeResolver<TParent>
  date?: PaymentToDateResolver<TParent>
  attachmentURL?: PaymentToAttachmentURLResolver<TParent>
}

export interface PaymentToIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface PaymentToTypeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface PaymentToAmountResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface PaymentToOutcomeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface PaymentToDateResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface PaymentToAttachmentURLResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLAdvancedSeachParametersTypeResolver<TParent = any> {
  event?: AdvancedSeachParametersToEventResolver<TParent>
  name?: AdvancedSeachParametersToNameResolver<TParent>
  registrationStatuses?: AdvancedSeachParametersToRegistrationStatusesResolver<TParent>
  dateOfEvent?: AdvancedSeachParametersToDateOfEventResolver<TParent>
  dateOfEventStart?: AdvancedSeachParametersToDateOfEventStartResolver<TParent>
  dateOfEventEnd?: AdvancedSeachParametersToDateOfEventEndResolver<TParent>
  timePeriodFrom?: AdvancedSeachParametersToTimePeriodFromResolver<TParent>
  contactNumber?: AdvancedSeachParametersToContactNumberResolver<TParent>
  contactEmail?: AdvancedSeachParametersToContactEmailResolver<TParent>
  nationalId?: AdvancedSeachParametersToNationalIdResolver<TParent>
  registrationNumber?: AdvancedSeachParametersToRegistrationNumberResolver<TParent>
  trackingId?: AdvancedSeachParametersToTrackingIdResolver<TParent>
  dateOfRegistration?: AdvancedSeachParametersToDateOfRegistrationResolver<TParent>
  dateOfRegistrationStart?: AdvancedSeachParametersToDateOfRegistrationStartResolver<TParent>
  dateOfRegistrationEnd?: AdvancedSeachParametersToDateOfRegistrationEndResolver<TParent>
  declarationLocationId?: AdvancedSeachParametersToDeclarationLocationIdResolver<TParent>
  declarationJurisdictionId?: AdvancedSeachParametersToDeclarationJurisdictionIdResolver<TParent>
  eventLocationId?: AdvancedSeachParametersToEventLocationIdResolver<TParent>
  eventCountry?: AdvancedSeachParametersToEventCountryResolver<TParent>
  eventLocationLevel1?: AdvancedSeachParametersToEventLocationLevel1Resolver<TParent>
  eventLocationLevel2?: AdvancedSeachParametersToEventLocationLevel2Resolver<TParent>
  eventLocationLevel3?: AdvancedSeachParametersToEventLocationLevel3Resolver<TParent>
  eventLocationLevel4?: AdvancedSeachParametersToEventLocationLevel4Resolver<TParent>
  eventLocationLevel5?: AdvancedSeachParametersToEventLocationLevel5Resolver<TParent>
  eventLocationLevel6?: AdvancedSeachParametersToEventLocationLevel6Resolver<TParent>
  childFirstNames?: AdvancedSeachParametersToChildFirstNamesResolver<TParent>
  childLastName?: AdvancedSeachParametersToChildLastNameResolver<TParent>
  childDoB?: AdvancedSeachParametersToChildDoBResolver<TParent>
  childDoBStart?: AdvancedSeachParametersToChildDoBStartResolver<TParent>
  childDoBEnd?: AdvancedSeachParametersToChildDoBEndResolver<TParent>
  childGender?: AdvancedSeachParametersToChildGenderResolver<TParent>
  childIdentifier?: AdvancedSeachParametersToChildIdentifierResolver<TParent>
  deceasedFirstNames?: AdvancedSeachParametersToDeceasedFirstNamesResolver<TParent>
  deceasedFamilyName?: AdvancedSeachParametersToDeceasedFamilyNameResolver<TParent>
  deceasedGender?: AdvancedSeachParametersToDeceasedGenderResolver<TParent>
  deceasedDoB?: AdvancedSeachParametersToDeceasedDoBResolver<TParent>
  deceasedDoBStart?: AdvancedSeachParametersToDeceasedDoBStartResolver<TParent>
  deceasedDoBEnd?: AdvancedSeachParametersToDeceasedDoBEndResolver<TParent>
  deceasedIdentifier?: AdvancedSeachParametersToDeceasedIdentifierResolver<TParent>
  motherFirstNames?: AdvancedSeachParametersToMotherFirstNamesResolver<TParent>
  motherFamilyName?: AdvancedSeachParametersToMotherFamilyNameResolver<TParent>
  motherDoB?: AdvancedSeachParametersToMotherDoBResolver<TParent>
  motherDoBStart?: AdvancedSeachParametersToMotherDoBStartResolver<TParent>
  motherDoBEnd?: AdvancedSeachParametersToMotherDoBEndResolver<TParent>
  motherIdentifier?: AdvancedSeachParametersToMotherIdentifierResolver<TParent>
  fatherFirstNames?: AdvancedSeachParametersToFatherFirstNamesResolver<TParent>
  fatherFamilyName?: AdvancedSeachParametersToFatherFamilyNameResolver<TParent>
  fatherDoB?: AdvancedSeachParametersToFatherDoBResolver<TParent>
  fatherDoBStart?: AdvancedSeachParametersToFatherDoBStartResolver<TParent>
  fatherDoBEnd?: AdvancedSeachParametersToFatherDoBEndResolver<TParent>
  fatherIdentifier?: AdvancedSeachParametersToFatherIdentifierResolver<TParent>
  informantFirstNames?: AdvancedSeachParametersToInformantFirstNamesResolver<TParent>
  informantFamilyName?: AdvancedSeachParametersToInformantFamilyNameResolver<TParent>
  informantDoB?: AdvancedSeachParametersToInformantDoBResolver<TParent>
  informantDoBStart?: AdvancedSeachParametersToInformantDoBStartResolver<TParent>
  informantDoBEnd?: AdvancedSeachParametersToInformantDoBEndResolver<TParent>
  informantIdentifier?: AdvancedSeachParametersToInformantIdentifierResolver<TParent>
  compositionType?: AdvancedSeachParametersToCompositionTypeResolver<TParent>
}

export interface AdvancedSeachParametersToEventResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AdvancedSeachParametersToNameResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AdvancedSeachParametersToRegistrationStatusesResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AdvancedSeachParametersToDateOfEventResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AdvancedSeachParametersToDateOfEventStartResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AdvancedSeachParametersToDateOfEventEndResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AdvancedSeachParametersToTimePeriodFromResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AdvancedSeachParametersToContactNumberResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AdvancedSeachParametersToContactEmailResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AdvancedSeachParametersToNationalIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AdvancedSeachParametersToRegistrationNumberResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AdvancedSeachParametersToTrackingIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AdvancedSeachParametersToDateOfRegistrationResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AdvancedSeachParametersToDateOfRegistrationStartResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AdvancedSeachParametersToDateOfRegistrationEndResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AdvancedSeachParametersToDeclarationLocationIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AdvancedSeachParametersToDeclarationJurisdictionIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AdvancedSeachParametersToEventLocationIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AdvancedSeachParametersToEventCountryResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AdvancedSeachParametersToEventLocationLevel1Resolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AdvancedSeachParametersToEventLocationLevel2Resolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AdvancedSeachParametersToEventLocationLevel3Resolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AdvancedSeachParametersToEventLocationLevel4Resolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AdvancedSeachParametersToEventLocationLevel5Resolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AdvancedSeachParametersToEventLocationLevel6Resolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AdvancedSeachParametersToChildFirstNamesResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AdvancedSeachParametersToChildLastNameResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AdvancedSeachParametersToChildDoBResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AdvancedSeachParametersToChildDoBStartResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AdvancedSeachParametersToChildDoBEndResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AdvancedSeachParametersToChildGenderResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AdvancedSeachParametersToChildIdentifierResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AdvancedSeachParametersToDeceasedFirstNamesResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AdvancedSeachParametersToDeceasedFamilyNameResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AdvancedSeachParametersToDeceasedGenderResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AdvancedSeachParametersToDeceasedDoBResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AdvancedSeachParametersToDeceasedDoBStartResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AdvancedSeachParametersToDeceasedDoBEndResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AdvancedSeachParametersToDeceasedIdentifierResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AdvancedSeachParametersToMotherFirstNamesResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AdvancedSeachParametersToMotherFamilyNameResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AdvancedSeachParametersToMotherDoBResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AdvancedSeachParametersToMotherDoBStartResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AdvancedSeachParametersToMotherDoBEndResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AdvancedSeachParametersToMotherIdentifierResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AdvancedSeachParametersToFatherFirstNamesResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AdvancedSeachParametersToFatherFamilyNameResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AdvancedSeachParametersToFatherDoBResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AdvancedSeachParametersToFatherDoBStartResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AdvancedSeachParametersToFatherDoBEndResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AdvancedSeachParametersToFatherIdentifierResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AdvancedSeachParametersToInformantFirstNamesResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AdvancedSeachParametersToInformantFamilyNameResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AdvancedSeachParametersToInformantDoBResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AdvancedSeachParametersToInformantDoBStartResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AdvancedSeachParametersToInformantDoBEndResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AdvancedSeachParametersToInformantIdentifierResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AdvancedSeachParametersToCompositionTypeResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLEventMetricsByRegistrarTypeResolver<TParent = any> {
  registrarPractitioner?: EventMetricsByRegistrarToRegistrarPractitionerResolver<TParent>
  total?: EventMetricsByRegistrarToTotalResolver<TParent>
  late?: EventMetricsByRegistrarToLateResolver<TParent>
  delayed?: EventMetricsByRegistrarToDelayedResolver<TParent>
}

export interface EventMetricsByRegistrarToRegistrarPractitionerResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface EventMetricsByRegistrarToTotalResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface EventMetricsByRegistrarToLateResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface EventMetricsByRegistrarToDelayedResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLEventMetricsByLocationTypeResolver<TParent = any> {
  location?: EventMetricsByLocationToLocationResolver<TParent>
  total?: EventMetricsByLocationToTotalResolver<TParent>
  late?: EventMetricsByLocationToLateResolver<TParent>
  delayed?: EventMetricsByLocationToDelayedResolver<TParent>
  home?: EventMetricsByLocationToHomeResolver<TParent>
  healthFacility?: EventMetricsByLocationToHealthFacilityResolver<TParent>
}

export interface EventMetricsByLocationToLocationResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface EventMetricsByLocationToTotalResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface EventMetricsByLocationToLateResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface EventMetricsByLocationToDelayedResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface EventMetricsByLocationToHomeResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface EventMetricsByLocationToHealthFacilityResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLEventMetricsByTimeTypeResolver<TParent = any> {
  total?: EventMetricsByTimeToTotalResolver<TParent>
  late?: EventMetricsByTimeToLateResolver<TParent>
  delayed?: EventMetricsByTimeToDelayedResolver<TParent>
  home?: EventMetricsByTimeToHomeResolver<TParent>
  healthFacility?: EventMetricsByTimeToHealthFacilityResolver<TParent>
  month?: EventMetricsByTimeToMonthResolver<TParent>
  time?: EventMetricsByTimeToTimeResolver<TParent>
}

export interface EventMetricsByTimeToTotalResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface EventMetricsByTimeToLateResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface EventMetricsByTimeToDelayedResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface EventMetricsByTimeToHomeResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface EventMetricsByTimeToHealthFacilityResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface EventMetricsByTimeToMonthResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface EventMetricsByTimeToTimeResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLUserAuditLogItemWithCompositionTypeResolver<TParent = any> {
  time?: UserAuditLogItemWithCompositionToTimeResolver<TParent>
  ipAddress?: UserAuditLogItemWithCompositionToIpAddressResolver<TParent>
  userAgent?: UserAuditLogItemWithCompositionToUserAgentResolver<TParent>
  action?: UserAuditLogItemWithCompositionToActionResolver<TParent>
  practitionerId?: UserAuditLogItemWithCompositionToPractitionerIdResolver<TParent>
  data?: UserAuditLogItemWithCompositionToDataResolver<TParent>
}

export interface UserAuditLogItemWithCompositionToTimeResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserAuditLogItemWithCompositionToIpAddressResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserAuditLogItemWithCompositionToUserAgentResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserAuditLogItemWithCompositionToActionResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserAuditLogItemWithCompositionToPractitionerIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserAuditLogItemWithCompositionToDataResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLUserAuditLogItemTypeResolver<TParent = any> {
  time?: UserAuditLogItemToTimeResolver<TParent>
  ipAddress?: UserAuditLogItemToIpAddressResolver<TParent>
  userAgent?: UserAuditLogItemToUserAgentResolver<TParent>
  action?: UserAuditLogItemToActionResolver<TParent>
  practitionerId?: UserAuditLogItemToPractitionerIdResolver<TParent>
}

export interface UserAuditLogItemToTimeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserAuditLogItemToIpAddressResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserAuditLogItemToUserAgentResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserAuditLogItemToActionResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserAuditLogItemToPractitionerIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLRegistrationSearchSetTypeResolver<TParent = any> {
  status?: RegistrationSearchSetToStatusResolver<TParent>
  contactNumber?: RegistrationSearchSetToContactNumberResolver<TParent>
  contactEmail?: RegistrationSearchSetToContactEmailResolver<TParent>
  contactRelationship?: RegistrationSearchSetToContactRelationshipResolver<TParent>
  dateOfDeclaration?: RegistrationSearchSetToDateOfDeclarationResolver<TParent>
  trackingId?: RegistrationSearchSetToTrackingIdResolver<TParent>
  registrationNumber?: RegistrationSearchSetToRegistrationNumberResolver<TParent>
  eventLocationId?: RegistrationSearchSetToEventLocationIdResolver<TParent>
  registeredLocationId?: RegistrationSearchSetToRegisteredLocationIdResolver<TParent>
  reason?: RegistrationSearchSetToReasonResolver<TParent>
  comment?: RegistrationSearchSetToCommentResolver<TParent>
  duplicates?: RegistrationSearchSetToDuplicatesResolver<TParent>
  createdAt?: RegistrationSearchSetToCreatedAtResolver<TParent>
  modifiedAt?: RegistrationSearchSetToModifiedAtResolver<TParent>
  assignment?: RegistrationSearchSetToAssignmentResolver<TParent>
}

export interface RegistrationSearchSetToStatusResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RegistrationSearchSetToContactNumberResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RegistrationSearchSetToContactEmailResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RegistrationSearchSetToContactRelationshipResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RegistrationSearchSetToDateOfDeclarationResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RegistrationSearchSetToTrackingIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RegistrationSearchSetToRegistrationNumberResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RegistrationSearchSetToEventLocationIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RegistrationSearchSetToRegisteredLocationIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RegistrationSearchSetToReasonResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RegistrationSearchSetToCommentResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RegistrationSearchSetToDuplicatesResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RegistrationSearchSetToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RegistrationSearchSetToModifiedAtResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RegistrationSearchSetToAssignmentResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLOperationHistorySearchSetTypeResolver<TParent = any> {
  operationType?: OperationHistorySearchSetToOperationTypeResolver<TParent>
  operatedOn?: OperationHistorySearchSetToOperatedOnResolver<TParent>
  operatorRole?: OperationHistorySearchSetToOperatorRoleResolver<TParent>
  operatorName?: OperationHistorySearchSetToOperatorNameResolver<TParent>
  operatorOfficeName?: OperationHistorySearchSetToOperatorOfficeNameResolver<TParent>
  operatorOfficeAlias?: OperationHistorySearchSetToOperatorOfficeAliasResolver<TParent>
  notificationFacilityName?: OperationHistorySearchSetToNotificationFacilityNameResolver<TParent>
  notificationFacilityAlias?: OperationHistorySearchSetToNotificationFacilityAliasResolver<TParent>
  rejectReason?: OperationHistorySearchSetToRejectReasonResolver<TParent>
  rejectComment?: OperationHistorySearchSetToRejectCommentResolver<TParent>
}

export interface OperationHistorySearchSetToOperationTypeResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface OperationHistorySearchSetToOperatedOnResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface OperationHistorySearchSetToOperatorRoleResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface OperationHistorySearchSetToOperatorNameResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface OperationHistorySearchSetToOperatorOfficeNameResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface OperationHistorySearchSetToOperatorOfficeAliasResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface OperationHistorySearchSetToNotificationFacilityNameResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface OperationHistorySearchSetToNotificationFacilityAliasResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface OperationHistorySearchSetToRejectReasonResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface OperationHistorySearchSetToRejectCommentResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLBirthEventSearchSetTypeResolver<TParent = any> {
  id?: BirthEventSearchSetToIdResolver<TParent>
  type?: BirthEventSearchSetToTypeResolver<TParent>
  childName?: BirthEventSearchSetToChildNameResolver<TParent>
  childIdentifier?: BirthEventSearchSetToChildIdentifierResolver<TParent>
  dateOfBirth?: BirthEventSearchSetToDateOfBirthResolver<TParent>
  registration?: BirthEventSearchSetToRegistrationResolver<TParent>
  operationHistories?: BirthEventSearchSetToOperationHistoriesResolver<TParent>
  placeOfBirth?: BirthEventSearchSetToPlaceOfBirthResolver<TParent>
  childGender?: BirthEventSearchSetToChildGenderResolver<TParent>
  mothersFirstName?: BirthEventSearchSetToMothersFirstNameResolver<TParent>
  mothersLastName?: BirthEventSearchSetToMothersLastNameResolver<TParent>
  fathersFirstName?: BirthEventSearchSetToFathersFirstNameResolver<TParent>
  fathersLastName?: BirthEventSearchSetToFathersLastNameResolver<TParent>
  motherDateOfBirth?: BirthEventSearchSetToMotherDateOfBirthResolver<TParent>
  fatherDateOfBirth?: BirthEventSearchSetToFatherDateOfBirthResolver<TParent>
  motherIdentifier?: BirthEventSearchSetToMotherIdentifierResolver<TParent>
  fatherIdentifier?: BirthEventSearchSetToFatherIdentifierResolver<TParent>
}

export interface BirthEventSearchSetToIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface BirthEventSearchSetToTypeResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface BirthEventSearchSetToChildNameResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface BirthEventSearchSetToChildIdentifierResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface BirthEventSearchSetToDateOfBirthResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface BirthEventSearchSetToRegistrationResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface BirthEventSearchSetToOperationHistoriesResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface BirthEventSearchSetToPlaceOfBirthResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface BirthEventSearchSetToChildGenderResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface BirthEventSearchSetToMothersFirstNameResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface BirthEventSearchSetToMothersLastNameResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface BirthEventSearchSetToFathersFirstNameResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface BirthEventSearchSetToFathersLastNameResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface BirthEventSearchSetToMotherDateOfBirthResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface BirthEventSearchSetToFatherDateOfBirthResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface BirthEventSearchSetToMotherIdentifierResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface BirthEventSearchSetToFatherIdentifierResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLDeathEventSearchSetTypeResolver<TParent = any> {
  id?: DeathEventSearchSetToIdResolver<TParent>
  type?: DeathEventSearchSetToTypeResolver<TParent>
  deceasedGender?: DeathEventSearchSetToDeceasedGenderResolver<TParent>
  deceasedName?: DeathEventSearchSetToDeceasedNameResolver<TParent>
  dateOfDeath?: DeathEventSearchSetToDateOfDeathResolver<TParent>
  registration?: DeathEventSearchSetToRegistrationResolver<TParent>
  operationHistories?: DeathEventSearchSetToOperationHistoriesResolver<TParent>
}

export interface DeathEventSearchSetToIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DeathEventSearchSetToTypeResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DeathEventSearchSetToDeceasedGenderResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DeathEventSearchSetToDeceasedNameResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DeathEventSearchSetToDateOfDeathResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DeathEventSearchSetToRegistrationResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DeathEventSearchSetToOperationHistoriesResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLMarriageEventSearchSetTypeResolver<TParent = any> {
  id?: MarriageEventSearchSetToIdResolver<TParent>
  type?: MarriageEventSearchSetToTypeResolver<TParent>
  brideName?: MarriageEventSearchSetToBrideNameResolver<TParent>
  groomName?: MarriageEventSearchSetToGroomNameResolver<TParent>
  brideIdentifier?: MarriageEventSearchSetToBrideIdentifierResolver<TParent>
  groomIdentifier?: MarriageEventSearchSetToGroomIdentifierResolver<TParent>
  dateOfMarriage?: MarriageEventSearchSetToDateOfMarriageResolver<TParent>
  registration?: MarriageEventSearchSetToRegistrationResolver<TParent>
  operationHistories?: MarriageEventSearchSetToOperationHistoriesResolver<TParent>
}

export interface MarriageEventSearchSetToIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MarriageEventSearchSetToTypeResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MarriageEventSearchSetToBrideNameResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MarriageEventSearchSetToGroomNameResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MarriageEventSearchSetToBrideIdentifierResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MarriageEventSearchSetToGroomIdentifierResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MarriageEventSearchSetToDateOfMarriageResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MarriageEventSearchSetToRegistrationResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MarriageEventSearchSetToOperationHistoriesResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLEventProgressDataTypeResolver<TParent = any> {
  timeInProgress?: EventProgressDataToTimeInProgressResolver<TParent>
  timeInReadyForReview?: EventProgressDataToTimeInReadyForReviewResolver<TParent>
  timeInRequiresUpdates?: EventProgressDataToTimeInRequiresUpdatesResolver<TParent>
  timeInWaitingForApproval?: EventProgressDataToTimeInWaitingForApprovalResolver<TParent>
  timeInWaitingForBRIS?: EventProgressDataToTimeInWaitingForBRISResolver<TParent>
  timeInReadyToPrint?: EventProgressDataToTimeInReadyToPrintResolver<TParent>
}

export interface EventProgressDataToTimeInProgressResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface EventProgressDataToTimeInReadyForReviewResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface EventProgressDataToTimeInRequiresUpdatesResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface EventProgressDataToTimeInWaitingForApprovalResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface EventProgressDataToTimeInWaitingForBRISResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface EventProgressDataToTimeInReadyToPrintResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLWebhookPermissionTypeResolver<TParent = any> {
  event?: WebhookPermissionToEventResolver<TParent>
  permissions?: WebhookPermissionToPermissionsResolver<TParent>
}

export interface WebhookPermissionToEventResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface WebhookPermissionToPermissionsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLAuditLogItemBaseTypeResolver<TParent = any> {
  (parent: TParent, context: Context, info: GraphQLResolveInfo):
    | 'UserAuditLogItemWithComposition'
    | 'UserAuditLogItem'
    | Promise<'UserAuditLogItemWithComposition' | 'UserAuditLogItem'>
}
export interface GQLAdditionalIdWithCompositionIdTypeResolver<TParent = any> {
  compositionId?: AdditionalIdWithCompositionIdToCompositionIdResolver<TParent>
  trackingId?: AdditionalIdWithCompositionIdToTrackingIdResolver<TParent>
}

export interface AdditionalIdWithCompositionIdToCompositionIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AdditionalIdWithCompositionIdToTrackingIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}
