# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.
#
# OpenCRVS is also distributed under the terms of the Civil Registration
# & Healthcare Disclaimer located at http://opencrvs.org/license.
#
# Copyright (C) The OpenCRVS Authors located at https://github.com/opencrvs/opencrvs-core/blob/master/AUTHORS.
enum RegStatus {
  IN_PROGRESS
  ARCHIVED
  DECLARED
  DECLARATION_UPDATED
  WAITING_VALIDATION
  CORRECTION_REQUESTED
  VALIDATED
  REGISTERED
  CERTIFIED
  REJECTED
  ISSUED
}

enum RegAction {
  VERIFIED
  ASSIGNED
  UNASSIGNED
  REINSTATED
  REQUESTED_CORRECTION
  APPROVED_CORRECTION
  REJECTED_CORRECTION
  CORRECTED
  DOWNLOADED
  VIEWED
  MARKED_AS_DUPLICATE
  MARKED_AS_NOT_DUPLICATE
  FLAGGED_AS_POTENTIAL_DUPLICATE
}

enum RegistrationType {
  BIRTH
  DEATH
  MARRIAGE
}

enum PaymentType {
  MANUAL
}

enum PaymentOutcomeType {
  COMPLETED
  ERROR
  PARTIAL
}

input PaymentInput {
  paymentId: ID
  type: PaymentType
  amount: Float
  outcome: PaymentOutcomeType
  date: Date
  data: String
}

input CorrectionPaymentInput {
  _fhirID: ID
  attachmentData: String
  type: PaymentType!
  amount: Float!
  outcome: PaymentOutcomeType!
  date: Date!
}

type Payment {
  id: ID!
  type: PaymentType!
  amount: Float!
  outcome: PaymentOutcomeType!
  date: Date!
  attachmentURL: String
}

input MedicalPractitionerInput { # -> Encounter.participant
  name: String # -> Encounter.participant.individual(Practitioner).name
  qualification: String # -> Encounter.participant.individual(Practitioner).qualification
  lastVisitDate: Date # -> Encounter.participant.preriod.start
}

type MedicalPractitioner { # -> Encounter.participant
  name: String # -> Encounter.participant.individual(Practitioner).name
  qualification: String # -> Encounter.participant.individual(Practitioner).qualification
  lastVisitDate: Date # -> Encounter.participant.preriod.start
}

input CommentInput {
  user: UserInput
  comment: String
  createdAt: Date
}

type Comment { # Annotation
  id: ID!
  user: User # -> .authorString
  comment: String # -> .text
  createdAt: Date # -> .time
}

type StatusReason {
  text: String
}

input RegWorkflowInput {
  type: RegStatus
  user: UserInput
  timestamp: Date
  reason: String
  comments: [CommentInput]
  location: LocationInput
  timeLoggedMS: Int
}

type RegWorkflow { # Task
  id: ID!
  type: RegStatus # -> .businessStatus
  user: User # -> extension(url='http://opencrvs.org/specs/extension/regLastUser').valueReference
  timestamp: Date # -> lastModified
  comments: [Comment] # -> .note
  reason: String # -> .reason.text
  location: Location # -> extension(url='http://opencrvs.org/specs/extension/regLastOffice').valueReference.partOf
  office: Location # -> extension(url='http://opencrvs.org/specs/extension/regLastOffice').valueReference
  timeLogged: Int # -> from metrics
}

type DuplicatesInfo {
  compositionId: ID
  trackingId: String
}

type InputOutput {
  valueCode: String!
  valueId: String!
  value: FieldValue!
}

type IntegratedSystem {
  name: String
  username: String
  type: String
}

type History {
  user: User
  date: Date
  regStatus: RegStatus
  ipAddress: String
  action: RegAction
  note: String
  statusReason: StatusReason
  reason: String
  requester: String
  requesterOther: String
  hasShowedVerifiedDocument: Boolean
  certificateTemplateId: String
  noSupportingDocumentationRequired: Boolean
  otherReason: String
  #This doesn't resolve to the System model properly rather
  #uses the getSystem endpoint in user-mgnt
  system: IntegratedSystem # -> identitifier(system='http://opencrvs.org/specs/extension/system_identifier')
  location: Location # -> extension(url='http://opencrvs.org/specs/extension/regLastOffice').valueReference.partOf
  office: Location # -> extension(url='http://opencrvs.org/specs/extension/regLastOffice').valueReference
  dhis2Notification: Boolean # -> identitifier(system='http://opencrvs.org/specs/extension/dhis2_event_identifier')
  comments: [Comment]
  input: [InputOutput]
  output: [InputOutput]
  certificates: [Certificate]
  signature: Signature
  payment: Payment
  documents: [Attachment!]!
  duplicateOf: String
  potentialDuplicates: [String!]
}

interface EventRegistration {
  id: ID! # long uuid
  registration: Registration
  history: [History]
  createdAt: Date
}

input ObservationFHIRIDS {
  maleDependentsOfDeceased: String
  femaleDependentsOfDeceased: String
  mannerOfDeath: String
  deathDescription: String
  causeOfDeathEstablished: String
  causeOfDeathMethod: String
  causeOfDeath: String
  birthType: String
  typeOfMarriage: String
  weightAtBirth: String
  attendantAtBirth: String
  childrenBornAliveToMother: String
  foetalDeathsToMother: String
  lastPreviousLiveBirth: String
}

input FHIRIDMap {
  composition: String
  encounter: String
  eventLocation: String
  questionnaireResponse: String
  observation: ObservationFHIRIDS
}

input BirthRegistrationInput {
  _fhirIDMap: FHIRIDMap
  registration: RegistrationInput
  child: PersonInput
  mother: PersonInput
  father: PersonInput
  informant: RelatedPersonInput
  eventLocation: LocationInput
  birthType: String
  questionnaire: [QuestionnaireQuestionInput]
  weightAtBirth: Float
  attendantAtBirth: String
  otherAttendantAtBirth: String
  childrenBornAliveToMother: Int
  foetalDeathsToMother: Int
  lastPreviousLiveBirth: Date
  createdAt: Date
  updatedAt: Date
}

type BirthRegistration implements EventRegistration { # -> Composition
  id: ID! # long uuid
  _fhirIDMap: Map
  registration: Registration
  child: Person # -> .section(code='child-details').entry.reference
  mother: Person # -> .section(code='mother-details').entry.reference
  father: Person # -> .section(code='father-details').entry.reference
  informant: RelatedPerson # -> .section(code='informant-details').entry.reference
  eventLocation: Location
  birthType: String # -> Observation.valueInteger
  questionnaire: [QuestionnaireQuestion]
  weightAtBirth: Float # -> Observation.valueQuantity (code=kg)
  attendantAtBirth: String # -> Observation.valueString
  otherAttendantAtBirth: String
  childrenBornAliveToMother: Int # -> Observation.valueInteger
  foetalDeathsToMother: Int # -> Observation.valueInteger
  lastPreviousLiveBirth: Date # -> Observation.valueDateTime
  createdAt: Date # -> .date($first)
  updatedAt: Date # -> .date
  history: [History]
}

input DeathRegistrationInput {
  _fhirIDMap: FHIRIDMap
  registration: RegistrationInput
  # Remember to mark person as deceased
  deceased: PersonInput
  informant: RelatedPersonInput # -> Use for informant ->.section(code='informant-details').entry.reference
  mother: PersonInput # -> Use for informant ->.section(code='mother-details').entry.reference
  father: PersonInput # -> Use for informant ->.section(code='father-details').entry.reference
  spouse: PersonInput # -> Use for informant ->.section(code='spouse-details').entry.reference
  eventLocation: LocationInput
  questionnaire: [QuestionnaireQuestionInput]
  mannerOfDeath: String # -> Observation.valueCodeableConcept
  deathDescription: String
  causeOfDeathMethod: String # -> Observation.valueCodeableConcept
  causeOfDeathEstablished: String
  causeOfDeath: String # need to store ICD-10? More types of cause of death
  maleDependentsOfDeceased: Float # -> Observation.valueCodeableConcept
  femaleDependentsOfDeceased: Float # -> Observation.valueCodeableConcept
  medicalPractitioner: MedicalPractitionerInput # -> Encounter.participant
  createdAt: Date
  updatedAt: Date
}

# In BDRIS2 BRN is used to link to birth - Must have BRN to register death. Only deathLocation and current address is captures for death as the rest is the same as birth registration
type DeathRegistration implements EventRegistration { # -> Composition
  id: ID! # long uuid
  _fhirIDMap: Map
  registration: Registration
  # Remember to mark person as deceased
  deceased: Person # -> .section(code='deceased-details').entry.reference
  informant: RelatedPerson # -> Use for informant ->.section(code='informant-details').entry.reference
  mother: Person # -> Use for informant ->.section(code='mother-details').entry.reference
  father: Person # -> Use for informant ->.section(code='father-details').entry.reference
  spouse: Person # -> Use for informant ->.section(code='spouse-details').entry.reference
  eventLocation: Location
  questionnaire: [QuestionnaireQuestion]
  mannerOfDeath: String # -> Observation.valueCodeableConcept
  deathDescription: String
  causeOfDeathMethod: String # -> Observation.valueCodeableConcept
  causeOfDeathEstablished: String
  causeOfDeath: String # -> Observation.valueCodeableConcept
  maleDependentsOfDeceased: Float # -> Observation.valueCodeableConcept
  femaleDependentsOfDeceased: Float # -> Observation.valueCodeableConcept
  medicalPractitioner: MedicalPractitioner # -> Encounter.participant
  createdAt: Date # -> .date($first)
  updatedAt: Date # -> .date
  history: [History]
}

input MarriageRegistrationInput {
  _fhirIDMap: FHIRIDMap
  registration: RegistrationInput
  informant: RelatedPersonInput
  bride: PersonInput
  groom: PersonInput
  witnessOne: RelatedPersonInput
  witnessTwo: RelatedPersonInput
  eventLocation: LocationInput
  typeOfMarriage: String
  questionnaire: [QuestionnaireQuestionInput]
  createdAt: Date
  updatedAt: Date
}

type MarriageRegistration implements EventRegistration { # -> Composition
  id: ID! # long uuid
  _fhirIDMap: Map
  registration: Registration
  informant: RelatedPerson # -> Use for informant ->.section(code='informant-details').entry.reference
  bride: Person # -> .section(code='bride-details').entry.reference
  groom: Person # -> .section(code='groom-details').entry.reference
  witnessOne: RelatedPerson # -> .section(code='witnessOne-details').entry.reference
  witnessTwo: RelatedPerson # -> .section(code='witnessTwo-details').entry.reference
  eventLocation: Location
  typeOfMarriage: String # -> Observation.valueInteger
  questionnaire: [QuestionnaireQuestion]
  createdAt: Date # -> .date($first)
  updatedAt: Date # -> .date
  history: [History]
}

input CorrectionValueInput {
  section: String!
  fieldName: String!
  oldValue: FieldValue
  newValue: FieldValue!
}

input CorrectionInput {
  requester: String! # MOTHER, OTHER...
  requesterOther: String # "The neighbour"
  hasShowedVerifiedDocument: Boolean!
  noSupportingDocumentationRequired: Boolean!
  attachments: [AttachmentInput!]!
  payment: CorrectionPaymentInput
  values: [CorrectionValueInput!]!
  location: LocationInput!
  reason: String!
  otherReason: String!
  note: String!
}

input RegistrationInput {
  _fhirID: ID
  draftId: String # long uuid for preventing an event from duplicate submission
  # short uuid easy to remember
  trackingId: String
  # BRN (Birth Registration Number) DRN (Death Registration Number) - Format to be decided
  registrationNumber: String
  paperFormID: String
  page: String
  book: String
  informantsSignature: String # -> extension(url='http://opencrvs.org/specs/extension/informants-signature').valueString
  groomSignature: String # -> extension(url='http://opencrvs.org/specs/extension/groom-signature').valueString
  brideSignature: String # -> extension(url='http://opencrvs.org/specs/extension/bride-signature').valueString
  witnessOneSignature: String # -> extension(url='http://opencrvs.org/specs/extension/witness-one-signature').valueString
  witnessTwoSignature: String # -> extension(url='http://opencrvs.org/specs/extension/witness-two-signature').valueString
  informantType: String # -> Observation.valueString
  otherInformantType: String
  contactPhoneNumber: String
  contactEmail: String
  status: [RegWorkflowInput]
  type: RegistrationType
  inCompleteFields: String
  attachments: [AttachmentInput!]
  certificates: [CertificateInput]
  location: LocationInput
  correction: CorrectionInput
  changedValues: [CorrectionValueInput!]
}

type Registration { # -> Task
  id: ID # -> .id
  _fhirID: ID # -> .id
  draftId: String
  # short uuid easy to remember
  trackingId: String # -> .identifier
  # BRN (Birth Registration Number) DRN (Death Registration Number) - Format to be decided
  registrationNumber: String # -> .identifier
  paperFormID: String # -> .identifier
  page: String # -> .identifier
  book: String # -> .identifier
  informantType: String # -> Observation.valueString
  otherInformantType: String
  assignment: AssignmentData # -> extension(url='http://opencrvs.org/specs/extension/regAssigned')
  contact: String # -> extension(url='http://opencrvs.org/specs/extension/contact-person').valueString
  contactRelationship: String # -> extension(url='http://opencrvs.org/specs/extension/contact-relationship').valueString
  informantsSignature: String # -> extension(url='http://opencrvs.org/specs/extension/informants-signature').valueString
  groomSignature: String # -> extension(url='http://opencrvs.org/specs/extension/groom-signature').valueString
  brideSignature: String # -> extension(url='http://opencrvs.org/specs/extension/bride-signature').valueString
  witnessOneSignature: String # -> extension(url='http://opencrvs.org/specs/extension/witness-one-signature').valueString
  witnessTwoSignature: String # -> extension(url='http://opencrvs.org/specs/extension/witness-two-signature').valueString
  contactPhoneNumber: String # -> extension(url='http://opencrvs.org/specs/extension/contact-person-phone-number').valueString
  contactEmail: String # -> extension(url='http://opencrvs.org/specs/extension/contact-person-email').valueString
  status: [RegWorkflow] # -> Task.*
  type: RegistrationType # -> .code
  inCompleteFields: String # -> .status ('draft' | 'ready') && extension(url='http://opencrvs.org/specs/extension/in-complete-fields').valueString
  attachments: [Attachment] # -> Composition.section(code='scanned-documents').entry.reference
  certificates: [Certificate] # -> Composition.section(code='certificates').entry.reference
  duplicates: [DuplicatesInfo]
}

input CertificateInput {
  collector: RelatedPersonInput
  hasShowedVerifiedDocument: Boolean
  payments: [PaymentInput]
  certificateTemplateId: String
}

type Certificate { # -> Document Reference
  collector: RelatedPerson # -> .extension
  certifier: User # -> .extension
  hasShowedVerifiedDocument: Boolean # -> .extension
  payments: [Payment] # -> .extension
  certificateTemplateId: String
}

input QuestionnaireQuestionInput {
  fieldId: String
  value: String
}

enum AttachmentInputStatus {
  approved
  validated
  deleted
}

input AttachmentInput {
  _fhirID: ID
  contentType: String
  # base64
  data: String
  uri: String
  status: AttachmentInputStatus
  originalFileName: String
  systemFileName: String
  type: String
  description: String # -> use for other document type -> .description
  subject: String
  createdAt: Date
}

enum AttachmentInputStatus {
  approved
  validated
  deleted
}

type QuestionnaireQuestion {
  fieldId: String
  value: String
}

type Attachment { # -> DocumentReference
  id: ID! # uuid
  _fhirID: ID # -> .id
  contentType: String # -> .content.attachment.contentType
  # base64
  data: String # -> .content.attachment.data base64
  uri: String
  # approved/validated/deleted
  status: String # -> .status
  originalFileName: String # -> .identifier
  systemFileName: String # -> .identifier
  type: String # -> .type
  description: String # -> use for other document type -> .description
  subject: String # -> .subject (convert this to a reference to the person resoure in FHIR)
  createdAt: Date # -> .created
}

type BirthRegResultSet {
  results: [BirthRegistration]
  totalItems: Int
}

type DeathRegResultSet {
  results: [DeathRegistration]
  totalItems: Int
}

type EventRegResultSet {
  results: [EventRegistration]
  totalItems: Int
}

type EventRegCount {
  count: Int
}

type RegistrationCount {
  declared: Int
  rejected: Int
}

type StatusWiseRegistrationCount {
  status: String!
  count: Int!
}

type RegistrationCountResult {
  results: [StatusWiseRegistrationCount]!
  total: Int!
}

type CreatedIds {
  compositionId: String
  trackingId: String
  isPotentiallyDuplicate: Boolean
}

type Reinstated {
  taskEntryResourceID: ID!
  registrationStatus: RegStatus
}

union RecordDetails = BirthRegistration | DeathRegistration

type Query {
  fetchBirthRegistration(id: ID!): BirthRegistration
  queryRegistrationByIdentifier(identifier: ID!): BirthRegistration
  queryPersonByIdentifier(identifier: ID!): Person
  listBirthRegistrations(
    locationIds: [String]
    status: String
    userId: String
    from: Date
    to: Date
    count: Int
    skip: Int
  ): BirthRegResultSet
  fetchDeathRegistration(id: ID!): DeathRegistration
  fetchEventRegistration(id: ID!): EventRegistration
  fetchRegistration(id: ID!): EventRegistration
  fetchRegistrationForViewing(id: ID!): EventRegistration
  queryPersonByNidIdentifier(dob: String, nid: String, country: String): Person
  fetchRegistrationCountByStatus(
    status: [String]!
    locationId: String
    event: String
  ): RegistrationCountResult
  fetchMarriageRegistration(id: ID!): MarriageRegistration
  fetchRecordDetailsForVerification(id: String!): RecordDetails
}

input CorrectionRejectionInput {
  reason: String!
  timeLoggedMS: Int!
}

input IdentifierInput {
  type: String!
  value: String!
}

input ConfirmRegistrationInput {
  registrationNumber: String!
  identifiers: [IdentifierInput!]
  comment: String # For record audit
}

input RejectRegistrationInput {
  reason: String!
  comment: String
}

type Mutation {
  # Generic correction handlers for all event types
  # Applying a correction request is made on a event level as payload is dependant on event type
  requestRegistrationCorrection(id: ID!, details: CorrectionInput!): ID!
  rejectRegistrationCorrection(id: ID!, details: CorrectionRejectionInput!): ID!

  approveBirthRegistrationCorrection(
    id: ID!
    details: BirthRegistrationInput!
  ): ID!
  approveDeathRegistrationCorrection(
    id: ID!
    details: DeathRegistrationInput!
  ): ID!
  approveMarriageRegistrationCorrection(
    id: ID!
    details: MarriageRegistrationInput!
  ): ID!
  createBirthRegistrationCorrection(
    id: ID!
    details: BirthRegistrationInput!
  ): ID!
  createDeathRegistrationCorrection(
    id: ID!
    details: DeathRegistrationInput!
  ): ID!
  createMarriageRegistrationCorrection(
    id: ID!
    details: MarriageRegistrationInput!
  ): ID!

  # BIRTH
  createBirthRegistration(details: BirthRegistrationInput!): CreatedIds!
  # process transitions
  markBirthAsVerified(
    id: ID!
    details: BirthRegistrationInput
  ): BirthRegistration # updates status to 'verified' + audit? - attachments are valid and in order, ready for registration - internally call update if details exists
  markBirthAsValidated(id: ID!, details: BirthRegistrationInput): ID # updates status to 'validated' - registration agent has validated the declaration
  markBirthAsRegistered(id: ID!, details: BirthRegistrationInput!): ID! # updates status to 'registered' - registration clerk has accepted the declaration, it is now official - internally call update if details exists
  markBirthAsCertified(id: ID!, details: BirthRegistrationInput!): ID! # updates status to 'certified' - a printed certificate has been produced - internally call update if details exists
  markBirthAsIssued(id: ID!, details: BirthRegistrationInput!): ID! # updates status to 'certified' - a printed certificate has been produced - internally call update if details exists
  markEventAsVoided(id: String!, reason: String!, comment: String!): ID! # updated status to 'voided' - the registration was captured in error
  markEventAsReinstated(id: String!): Reinstated # updates status to 'reinstated'
  markEventAsNotDuplicate(id: String!): ID! # removes duplicates from composition
  markEventAsArchived(
    id: String!
    reason: String
    comment: String
    duplicateTrackingId: String
  ): ID! # updates status to 'archived'
  # DEATH
  createDeathRegistration(details: DeathRegistrationInput!): CreatedIds!
  updateDeathRegistration(id: ID!, details: DeathRegistrationInput!): ID!
  # process transitions
  markDeathAsVerified(
    id: ID!
    details: DeathRegistrationInput
  ): DeathRegistration # updates status to 'verified' + audit? - attachments are valid and in order, ready for registration
  markDeathAsValidated(id: ID!, details: DeathRegistrationInput): ID # updates status to 'validated' - registration agent has validated the declaration
  markDeathAsRegistered(id: ID!, details: DeathRegistrationInput!): ID! # updates status to 'registered' - registration clerk has accepted the declaration, it is now official
  markDeathAsCertified(id: ID!, details: DeathRegistrationInput!): ID! # updates status to 'certified' - a printed certificate has been produced
  markDeathAsIssued(id: ID!, details: DeathRegistrationInput!): ID! # updates status to 'issued' - remove the certificate doc reference
  markEventAsUnassigned(id: String!): ID! # remove assigned extension from task'
  #MARRIAGE
  createMarriageRegistration(details: MarriageRegistrationInput!): CreatedIds!
  markMarriageAsValidated(id: ID!, details: MarriageRegistrationInput): ID # updates status to 'validated' - registration agent has validated the declaration
  markMarriageAsRegistered(id: ID!, details: MarriageRegistrationInput!): ID! # updates status to 'registered' - registration clerk has accepted the declaration, it is now official - internally call update if details exists
  markMarriageAsCertified(id: ID!, details: MarriageRegistrationInput!): ID! # updates status to 'certified' - a printed certificate has been produced - internally call update if details exists
  markMarriageAsIssued(id: ID!, details: MarriageRegistrationInput!): ID! # updates status to 'issued' - remove the certificate doc reference
  markEventAsDuplicate(
    id: String!
    reason: String!
    comment: String
    duplicateTrackingId: String
  ): ID!
  confirmRegistration(id: ID!, details: ConfirmRegistrationInput!): ID!
  rejectRegistration(id: ID!, details: RejectRegistrationInput!): ID!
  upsertRegistrationIdentifier(
    id: ID!
    identifierType: String!
    identifierValue: String!
  ): ID!
}
