# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.
#
# OpenCRVS is also distributed under the terms of the Civil Registration
# & Healthcare Disclaimer located at http://opencrvs.org/license.
#
# Copyright (C) The OpenCRVS Authors located at https://github.com/opencrvs/opencrvs-core/blob/master/AUTHORS.
input UserIdentifierInput {
  use: String # -> .use
  system: String # -> .system
  value: String # -> .system
}

type UserIdentifier { # -> identifier
  use: String # -> .use
  system: String # -> .system
  value: String # -> .system
}

input SignatureInput {
  data: String!
  type: String
}

enum Status {
  active
  deactivated
  pending
  disabled
}

# Create user form does not ask email, username
input UserInput {
  id: ID
  name: [HumanNameInput!]!
  identifier: [UserIdentifierInput]
  username: String
  mobile: String
  password: String
  status: Status
  role: String
  email: String
  primaryOffice: String
  device: String
  signature: SignatureInput
}

type Signature {
  data: String
  type: String
}

type LocalRegistrar {
  name: [HumanName]!
  role: String
  signature: Signature
}

type Avatar {
  type: String!
  data: String!
}

# This should be replaced in #2277
type System {
  name: String!
}

# @TODO: Is it actually so that there are users without primaryOffice?
# Fields type, underInvestigation and localRegistrar
# are optional when a Local System Admin creates new user.
type User {
  id: ID!
  userMgntUserID: ID!
  practitionerId: String!
  name: [HumanName!]! # -> .name
  username: String
  mobile: String
  role: UserRole!
  email: String
  status: Status!
  underInvestigation: Boolean
  primaryOffice: Location!
  localRegistrar: LocalRegistrar
  identifier: Identifier
  signature: Signature
  creationDate: String!
  avatar: Avatar
  device: String
  searches: [BookmarkedSeachItem!]
}

type SearchUserResult {
  results: [User]
  totalItems: Int
}

input SecurityQuestionAnswer {
  questionKey: String
  answer: String
}

type SearchFieldAgentResult {
  results: [SearchFieldAgentResponse]
  totalItems: Int
}

type SearchFieldAgentResponse {
  practitionerId: String
  fullName: String
  role: UserRole
  status: Status
  avatar: Avatar
  primaryOfficeId: String
  creationDate: String
  totalNumberOfDeclarationStarted: Int
  totalNumberOfInProgressAppStarted: Int
  totalNumberOfRejectedDeclarations: Int
  averageTimeForDeclaredDeclarations: Int
}

type VerifyPasswordResult {
  mobile: String
  scrope: [String]
  status: String
  username: String
  id: String
}

input AvatarInput {
  type: String!
  data: String!
}

type Query {
  getUser(userId: String!): User
  getUserByMobile(mobile: String!): User
  getUserByEmail(email: String!): User
  searchUsers(
    username: String
    mobile: String
    email: String
    status: String
    primaryOfficeId: String
    locationId: String
    count: Int
    skip: Int
    sort: String
  ): SearchUserResult
  searchFieldAgents(
    locationId: String
    primaryOfficeId: String
    status: String
    language: String
    timeStart: String!
    timeEnd: String!
    event: String
    count: Int
    skip: Int
    sort: String
  ): SearchFieldAgentResult
  verifyPasswordById(id: String!, password: String!): VerifyPasswordResult
}

type Mutation {
  createOrUpdateUser(user: UserInput!): User!
  activateUser(
    userId: String!
    password: String!
    securityQNAs: [SecurityQuestionAnswer]!
  ): String
  changePassword(
    userId: String!
    existingPassword: String!
    password: String!
  ): String
  changePhone(
    userId: String!
    phoneNumber: String!
    nonce: String!
    verifyCode: String!
  ): String
  changeEmail(
    userId: String!
    email: String!
    nonce: String!
    verifyCode: String!
  ): String
  changeAvatar(userId: String!, avatar: AvatarInput!): Avatar
  auditUser(
    userId: String!
    action: String!
    reason: String!
    comment: String
  ): String
  resendInvite(userId: String!): String
  usernameReminder(userId: String!): String
  resetPasswordInvite(userId: String!): String
}
