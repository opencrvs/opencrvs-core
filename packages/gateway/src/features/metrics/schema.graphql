# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.
#
# OpenCRVS is also distributed under the terms of the Civil Registration
# & Healthcare Disclaimer located at http://opencrvs.org/license.
#
# Copyright (C) The OpenCRVS Authors located at https://github.com/opencrvs/opencrvs-core/blob/master/AUTHORS.

type EventMetrics {
  total: Int!
  gender: String!
  eventLocationType: String!
  timeLabel: String!
  practitionerRole: String!
}

type EventMetricsByRegistrar {
  registrarPractitioner: User!
  total: Int!
  late: Int!
  delayed: Int!
}

type Estimation {
  totalEstimation: Float!
  maleEstimation: Float!
  femaleEstimation: Float!
  locationId: String!
  locationLevel: String!
}

type VSExport {
  event: String!
  startDate: Date!
  endDate: Date!
  fileSize: String!
  url: String!
  createdOn: Date!
}

type TotalMetricsResult {
  estimated: Estimation!
  results: [EventMetrics!]!
}
type TotalVSExport {
  results: [VSExport!]
}

type TotalMetricsByRegistrar {
  results: [EventMetricsByRegistrar!]!
  total: Int
}

type EventMetricsByLocation {
  location: Location!
  total: Int!
  late: Int!
  delayed: Int!
  home: Int!
  healthFacility: Int!
}

type TotalMetricsByLocation {
  results: [EventMetricsByLocation!]!
  total: Int
}

type EventMetricsByTime {
  total: Int!
  late: Int!
  delayed: Int!
  home: Int!
  healthFacility: Int!
  month: String!
  time: String!
}

type TotalMetricsByTime {
  results: [EventMetricsByTime!]!
  total: Int
}

type PaymentMetric {
  total: Float!
  paymentType: String!
}

type CertificationMetric {
  total: Float!
  eventType: String!
}

type AdditionalIdWithCompositionId {
  compositionId: String!
  trackingId: String!
}

interface AuditLogItemBase {
  time: String!
  ipAddress: String!
  userAgent: String!
  action: String!
  practitionerId: String!
}

type UserAuditLogItem implements AuditLogItemBase {
  time: String!
  ipAddress: String!
  userAgent: String!
  action: String!
  practitionerId: String!
}

type UserAuditLogItemWithComposition implements AuditLogItemBase {
  time: String!
  ipAddress: String!
  userAgent: String!
  action: String!
  practitionerId: String!
  data: AdditionalIdWithCompositionId!
}

union UserAuditLogResultItem =
    UserAuditLogItemWithComposition
  | UserAuditLogItem

type UserAuditLogResultSet {
  total: Int!
  results: [UserAuditLogResultItem!]!
}

type CorrectionMetric {
  total: Float!
  reason: String!
}

type DeclarationsStartedMetrics {
  fieldAgentDeclarations: Int!
  hospitalDeclarations: Int!
  officeDeclarations: Int!
}

type MonthWiseEstimationMetric {
  total: Float!
  withinTarget: Float!
  within1Year: Float!
  within5Years: Float!
  estimated: Float!
  month: Float!
  year: Float!
}

type EventInTargetDayEstimationCount {
  actualTotalRegistration: Int!
  actualTargetDayRegistration: Int!
  estimatedRegistration: Float!
  estimatedTargetDayPercentage: Float!
}

type LocationWiseEstimationMetrics {
  details: [LocationWiseTargetDayEstimation]
  total: EventInTargetDayEstimationCount
}

type LocationWiseEstimationMetric {
  total: Float!
  withinTarget: Float!
  within1Year: Float!
  within5Years: Float!
  estimated: Float!
  locationId: String!
  locationName: String!
}

type LocationStatisticsResponse {
  population: Int
  registrars: Int!
  offices: Int!
}

union MixedTotalMetricsResult =
    TotalMetricsByRegistrar
  | TotalMetricsByLocation
  | TotalMetricsByTime

type Query {
  getTotalMetrics(
    timeStart: String!
    timeEnd: String!
    locationId: String
    event: String!
  ): TotalMetricsResult
  getRegistrationsListByFilter(
    timeStart: String!
    timeEnd: String!
    locationId: String
    event: String!
    filterBy: String!
    skip: Int!
    size: Int!
  ): MixedTotalMetricsResult
  getVSExports: TotalVSExport
  getTotalPayments(
    timeStart: String!
    timeEnd: String!
    locationId: String
    event: String!
  ): [PaymentMetric!]
  getTotalCertifications(
    timeStart: String!
    timeEnd: String!
    locationId: String
  ): [CertificationMetric!]
  getTotalCorrections(
    timeStart: String!
    timeEnd: String!
    locationId: String
    event: String!
  ): [CorrectionMetric!]
  getLocationStatistics(
    locationId: String
    populationYear: Int!
  ): LocationStatisticsResponse
  getDeclarationsStartedMetrics(
    timeStart: String!
    timeEnd: String!
    locationId: String!
  ): DeclarationsStartedMetrics
  fetchMonthWiseEventMetrics(
    timeStart: String!
    timeEnd: String!
    locationId: String
    event: String!
  ): [MonthWiseEstimationMetric!]
  fetchLocationWiseEventMetrics(
    timeStart: String!
    timeEnd: String!
    locationId: String
    event: String!
  ): [LocationWiseEstimationMetric!]
  getUserAuditLog(
    practitionerId: String!
    skip: Int
    count: Int!
    timeStart: String
    timeEnd: String
  ): UserAuditLogResultSet
}
