# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.
#
# OpenCRVS is also distributed under the terms of the Civil Registration
# & Healthcare Disclaimer located at http://opencrvs.org/license.
#
# Copyright (C) The OpenCRVS Authors located at https://github.com/opencrvs/opencrvs-core/blob/master/AUTHORS.

name: Lint and run unit tests

on:
  pull_request:
  push:
    branches:
      - develop

jobs:
  setup:
    name: Setup tests
    permissions:
      contents: read
      pull-requests: write
    runs-on: ubuntu-24.04
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: 10
      - uses: mskelton/changelog-reminder-action@v3
        # forked repos cannot access secrets.GITHUB_TOKEN which causes this step
        # to fail
        continue-on-error: true
        if: github.event_name == 'pull_request'
        with:
          message: >
            Oops! Looks like you forgot to update the changelog.
            When updating CHANGELOG.md, please consider the following:
              - Changelog is read by country implementors who might not always be familiar with all technical details of OpenCRVS. Keep language high-level, user friendly and avoid technical references to internals.
              - Answer "What's new?", "Why was the change made?" and "Why should I care?" for each change.
              - If it's a breaking change, include a migration guide answering "What do I need to do to upgrade?".

      - name: Get list of packages
        id: set-matrix
        run: |
          PACKAGES=$(ls -d packages/* | jq -R -s -c 'split("\n")[:-1]')
          echo "Found packages: $PACKAGES"
          echo "matrix=${PACKAGES}" >> $GITHUB_OUTPUT

  test:
    name: Test
    needs: setup
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        package: ${{fromJson(needs.setup.outputs.matrix)}}

    steps:
      - name: Checking out git repo
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: 10

      - name: Check package.json and scripts
        id: check-scripts
        run: |
          if [ ! -f "${{ matrix.package }}/package.json" ]; then
            echo "No package.json found for ${{ matrix.package }}. Stopping pipeline."
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "skip=false" >> $GITHUB_OUTPUT

            if ! grep -q "\"test\":" "${{ matrix.package }}/package.json"; then
              echo "Test not found in ${{ matrix.package }}"
              echo "skip-test=true" >> $GITHUB_OUTPUT
            else
              echo "skip=false" >> $GITHUB_OUTPUT
            fi

            if ! grep -q "\"lint\":" "${{ matrix.package }}/package.json"; then
              echo "Lint scripts not found in ${{ matrix.package }}. Stopping pipeline."
              echo "skip-lint=true" >> $GITHUB_OUTPUT
            else
              echo "skip-lint=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Use Node.js from .nvmrc and cache dependencies
        if: steps.check-scripts.outputs.skip != 'true'
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          cache: 'pnpm'
      - name: Runs dependency installation
        if: steps.check-scripts.outputs.skip != 'true'
        run: CI="" pnpm install

      - name: Extract dependencies for ${{ matrix.package }}
        if: steps.check-scripts.outputs.skip != 'true'
        id: extract-dependencies
        run: |
          DEPENDENCIES=$(node -e "
            const { execSync } = require('child_process');
            const path = require('path');

            // Get all workspace data
            const output = execSync('pnpm m ls --json', { encoding: 'utf-8' });
            const allPackagesWithRoot = JSON.parse(output);
            const allPackages = allPackagesWithRoot.filter((pkg) => !!pkg.name);

            const normalize = name => name.replace(/^@opencrvs\//, 'packages/');

            // Convert to map for quick lookup
            const pkgMap = Object.fromEntries(
              allPackages.map(pkg => [normalize(pkg.name), pkg])
            );

            const visited = new Set();

            function getDeps(pkgName) {
              if (visited.has(pkgName)) return [];
              visited.add(pkgName);

              const pkg = pkgMap[pkgName];
              if (!pkg || !pkg.dependencies) return [];

              const workspaceDeps = Object.keys(pkg.dependencies)
                .filter(name => pkgMap[normalize(name)]); // is workspace package?

              return workspaceDeps.flatMap(dep =>
                [normalize(dep), ...getDeps(normalize(dep))]
              );
            }

            const root = normalize('${{ matrix.package }}');
            console.log(getDeps(root).join(' '));
          ")
          echo "DEPENDENCIES=${DEPENDENCIES}" >> $GITHUB_ENV
          echo "Found dependencies: $DEPENDENCIES"

      - name: Remove other package directories
        if: steps.check-scripts.outputs.skip != 'true'
        run: |
          for dir in packages/*; do
            if echo "${{ matrix.package }} $DEPENDENCIES" | grep -q -w "$dir"; then
              echo "Skipping $dir"
            else
              echo "Removing $dir"
              rm -rf "$dir"
            fi
          done

      - name: Verify every file has a license header
        if: steps.check-scripts.outputs.skip != 'true'
        run: npx license-check-and-add check -f license-config.json

      - name: Build common package
        if: matrix.package != 'packages/client' && steps.check-scripts.outputs.skip != 'true' && contains(env.DEPENDENCIES, 'packages/commons')
        run: cd packages/commons && pnpm build

      - name: Build components
        if: matrix.package != 'packages/client' && steps.check-scripts.outputs.skip != 'true' && contains(env.DEPENDENCIES, 'packages/components')
        run: |
          cd packages/components && pnpm build

      # TODO: should run parallel to unit tests as can take as much as unit tests
      - name: Run linting
        if: matrix.package != 'packages/client' && steps.check-scripts.outputs.skip != 'true' && steps.check-scripts.outputs.skip-lint != 'true'
        run: cd ${{ matrix.package }} && pnpm lint

      - name: Run Unit Test
        if: matrix.package != 'packages/client' && steps.check-scripts.outputs.skip != 'true' && steps.check-scripts.outputs.skip-test != 'true'
        run: cd ${{ matrix.package }} && pnpm test

  prepare-client-tests:
    name: Prepare client tests
    runs-on: ubuntu-24.04
    permissions:
      contents: read
    outputs:
      chromatic_required: ${{ steps.detect-changes.outputs.chromatic_required }}
    steps:
      - name: Checking out git repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 2 # Ensure we have at least one previous commit for comparison

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: 10

      - name: Detect changes in v2-events
        id: detect-changes
        run: |
          if git diff --name-only HEAD^ HEAD | grep -q 'packages/client/src/v2-events/'; then
            echo "chromatic_required=true" >> $GITHUB_OUTPUT
          else
            echo "chromatic_required=false" >> $GITHUB_OUTPUT
          fi

      - name: Use Node.js from .nvmrc
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          cache: 'pnpm'
      - name: Install dependencies
        run: CI="" pnpm install

      - name: Extract dependencies for client
        id: extract-dependencies
        run: |
          DEPENDENCIES=$(node -e "
            const { execSync } = require('child_process');
            const path = require('path');

            // Get all workspace data
            const output = execSync('pnpm m ls --json', { encoding: 'utf-8' });
            const allPackagesWithRoot = JSON.parse(output);
            const allPackages = allPackagesWithRoot.filter((pkg) => !!pkg.name);

            const normalize = name => name.replace(/^@opencrvs\//, 'packages/');

            // Create a map of workspace packages by normalized name
            const pkgMap = Object.fromEntries(
              allPackages.map(pkg => [normalize(pkg.name), pkg])
            );

            const visited = new Set();

            function getDeps(pkgName) {
              if (visited.has(pkgName)) return [];
              visited.add(pkgName);

              const pkg = pkgMap[pkgName];
              if (!pkg || !pkg.dependencies) return [];

              const workspaceDeps = Object.keys(pkg.dependencies)
                .filter(name => pkgMap[normalize(name)]); // keep only internal workspaces

              return workspaceDeps.flatMap(dep =>
                [normalize(dep), ...getDeps(normalize(dep))]
              );
            }

            const root = 'packages/client';
            console.log(getDeps(root).join(' '));
          ")
          echo "DEPENDENCIES=${DEPENDENCIES}" >> $GITHUB_ENV
          echo "Found dependencies: $DEPENDENCIES"

      - name: Remove other package directories
        run: |
          for dir in packages/*; do
            if echo "packages/client $DEPENDENCIES" | grep -q -w "$dir"; then
              echo "Skipping $dir"
            else
              echo "Removing $dir"
              rm -rf "$dir"
            fi
          done

      - name: Build common package
        run: cd packages/commons && pnpm build

      - name: Build components
        run: |
          cd packages/components && pnpm build

      - name: Upload filesystem as artifact
        uses: actions/upload-artifact@v4.5.0
        with:
          name: client
          include-hidden-files: true
          path: |
            .
            !**/.git
            !**/node_modules
  lint-client:
    name: Lint client
    needs: prepare-client-tests
    runs-on: ubuntu-24.04

    steps:
      - name: Download filesystem artifact
        uses: actions/download-artifact@v4.1.8
        with:
          name: client
          path: .

      - name: Use Node.js from .nvmrc
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          cache: 'pnpm'

      - name: Install dependencies
        run: CI="" pnpm install

      - name: Compile
        run: cd packages/client && pnpm test:compilation

      - name: Run linting
        run: cd packages/client && pnpm lint

  chromatic:
    name: Run chromatic visual tests
    needs: prepare-client-tests
    runs-on: ubuntu-24.04
    if: needs.prepare-client-tests.outputs.chromatic_required == 'true'

    steps:
      - name: Download filesystem artifact
        uses: actions/download-artifact@v4.1.8
        with:
          name: client
          path: .

      - name: Use Node.js from .nvmrc
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          cache: 'pnpm'

      - name: Install dependencies
        run: CI="" pnpm install

      - name: Fetch full Git history
        run: |
          git clone --bare https://github.com/opencrvs/opencrvs-core.git .git
          git config --local --bool core.bare false
          git reset --hard
          git clean -fd
          git fetch --prune
          git checkout ${{ github.head_ref || github.ref_name }}
          git reset --hard
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run Chromatic
        run: yarn run chromatic
        working-directory: packages/client
        env:
          CHROMATIC_PROJECT_TOKEN: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}

  test-storybook:
    name: Run storybook interaction tests
    needs: prepare-client-tests
    runs-on: ubuntu-24.04

    steps:
      - name: Download filesystem artifact
        uses: actions/download-artifact@v4.1.8
        with:
          name: client
          path: .

      - name: Use Node.js from .nvmrc
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          cache: 'pnpm'

      - name: Install dependencies
        run: CI="" pnpm install

      - name: Install Playwright
        # Playwright is required since @storybook/test-runner depends on it
        run: npx playwright install --with-deps

      - name: Build Storybook
        working-directory: packages/client
        run: pnpm run build-storybook

      - name: Serve Storybook and run tests
        working-directory: packages/client
        # based on https://storybook.js.org/docs/writing-tests/test-runner#run-against-non-deployed-storybooks
        run: |
          npx concurrently -k -s first -n "SB,TEST" -c "magenta,blue" \
            "npx http-server storybook-static --port 6006 --silent" \
            "npx wait-on tcp:127.0.0.1:6006 && yarn test-storybook"

  test-client:
    name: Test client
    needs: prepare-client-tests
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        shards: [1, 2, 3, 4, 5]

    steps:
      - name: Download filesystem artifact
        uses: actions/download-artifact@v4.1.8
        with:
          name: client
          path: .
      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: 10

      - name: Use Node.js from .nvmrc
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          cache: 'pnpm'

      - name: Install dependencies
        run: CI="" pnpm install

      - name: Run Unit Test
        run: cd packages/client && pnpm test -- --shard $(( ${{ strategy.job-index }} + 1 ))/${{ strategy.job-total }}

  lint-knip:
    name: Lint unused exports with Knip
    runs-on: ubuntu-24.04
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout base branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.base_ref }}
          path: base
      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: 10
      - name: Use Node.js from .nvmrc from base branch
        uses: actions/setup-node@v4
        with:
          node-version-file: base/.nvmrc

      - name: Install base dependencies
        run: pnpm install --ignore-scripts
        working-directory: base

      - name: Checkout the PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          path: pr
      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: 10

      - name: Use Node.js from .nvmrc from PR branch
        uses: actions/setup-node@v4
        with:
          node-version-file: pr/.nvmrc

      - name: Install PR dependencies
        run: pnpm install --ignore-scripts
        working-directory: pr

      - name: Run knip on base branch
        id: knip_base
        run: |
          npx knip --tags=-knipignore --no-exit-code --exports --reporter=markdown | sed -E 's/ +/ /g' | sed -E 's/:[0-9]+:[0-9]+//' > knip_report.md
          TOTAL=$(grep -oP '## [A-Za-z\s]+ \(\K[0-9]+' knip_report.md | awk '{sum+=$1} END {print sum}')
          echo "Total $TOTAL issue(s) on base branch."
          echo "total=${TOTAL}" >> $GITHUB_OUTPUT
        working-directory: base

      - name: Run knip on PR branch
        id: knip_pr
        run: |
          npx knip --tags=-knipignore --no-exit-code --exports --reporter=markdown | sed -E 's/ +/ /g' | sed -E 's/:[0-9]+:[0-9]+//' > knip_report.md
          TOTAL=$(grep -oP '## [A-Za-z\s]+ \(\K[0-9]+' knip_report.md | awk '{sum+=$1} END {print sum}')
          echo "Total $TOTAL issue(s) on PR branch."
          echo "total=${TOTAL}" >> $GITHUB_OUTPUT
        working-directory: pr

      - name: Compare base and PR totals
        if: ${{ steps.knip_pr.outputs.total > steps.knip_base.outputs.total }}
        run: |
          echo "## ⚠️ Total issues have increased in the PR branch." >> $GITHUB_STEP_SUMMARY
          echo "Differences:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`diff" >> $GITHUB_STEP_SUMMARY
          diff base/knip_report.md pr/knip_report.md >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

          exit 1

  build-toolkit:
    name: Build toolkit
    runs-on: ubuntu-24.04
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: 10

      - name: Use Node.js from .nvmrc
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc

      # - name: Install dependencies
      #   run: pnpm install --frozen-lockfile

      - name: Build commons
        run: pnpm build
        working-directory: packages/commons

      - name: Build events
        run: pnpm build
        working-directory: packages/events

      - name: Build toolkit
        run: pnpm build
        working-directory: packages/toolkit
